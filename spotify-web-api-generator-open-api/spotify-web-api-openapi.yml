openapi: 3.0.3
info:
  title: Spotify Web API
  contact:
    name: sonallux
    url: https://github.com/sonallux/spotify-web-api
  version: 2021.10.17
servers:
- url: https://api.spotify.com/v1
tags:
- name: category-albums
  description: Albums API
- name: category-artists
  description: Artists API
- name: category-browse
  description: Browse API
- name: category-episodes
  description: Episodes API
- name: category-follow
  description: Follow API
- name: category-library
  description: Library API
- name: category-markets
  description: Markets API
- name: category-personalization
  description: Personalization API
- name: category-player
  description: Player API
- name: category-playlists
  description: Playlists API
- name: category-search
  description: Search API
- name: category-shows
  description: Shows API
- name: category-tracks
  description: Tracks API
- name: category-users-profile
  description: Users Profile API
paths:
  /albums/{id}:
    get:
      tags:
      - category-albums
      summary: Get an Album
      description: Get Spotify catalog information for a single album.
      operationId: get-an-album
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the album."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ 200 OK and the response body contains an album object in JSON format.\
            \ On error, the header status code is an error code and the response body\
            \ contains an error object."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumObject'
      security:
      - oauth_2_0: []
  /albums/{id}/tracks:
    get:
      tags:
      - category-albums
      summary: Get an Album's Tracks
      description: |-
        Get Spotify catalog information about an album's tracks.
        Optional parameters can be used to limit the number of tracks returned.
      operationId: get-an-albums-tracks
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the album."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first item to return. Default: 0 (the first\
            \ item). Use with limit to get the next set of items."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ 200 OK and the response body contains an album object in JSON format.\
            \ On error, the header status code is an error code and the response body\
            \ contains an error object."
          content:
            application/json:
              schema:
                type: object
                properties:
                  href:
                    type: string
                    description: A link to the Web API endpoint returning the full
                      result of the request
                  items:
                    type: array
                    description: The requested content
                    items:
                      $ref: '#/components/schemas/SimplifiedTrackObject'
                  limit:
                    type: integer
                    description: The maximum number of items in the response (as set
                      in the query or by default).
                    format: int32
                  next:
                    type: string
                    description: URL to the next page of items. ( `null` if none)
                  offset:
                    type: integer
                    description: The offset of the items returned (as set in the query
                      or by default)
                    format: int32
                  previous:
                    type: string
                    description: URL to the previous page of items. ( `null` if none)
                  total:
                    type: integer
                    description: The total number of items available to return.
                    format: int32
      security:
      - oauth_2_0: []
  /albums:
    get:
      tags:
      - category-albums
      summary: Get Multiple Albums
      description: Get Spotify catalog information for multiple albums identified
        by their Spotify IDs.
      operationId: get-multiple-albums
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the albums. Maximum: 20 IDs."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `"albums"` and whose value is an array of [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-albumobject) in JSON format.

            Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumsObject'
      security:
      - oauth_2_0: []
  /artists/{id}:
    get:
      tags:
      - category-artists
      summary: Get an Artist
      description: Get Spotify catalog information for a single artist identified
        by their unique Spotify ID.
      operationId: get-an-artist
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the artist."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` OK and the response body contains an [artist object](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject)\
            \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistObject'
      security:
      - oauth_2_0: []
  /artists/{id}/albums:
    get:
      tags:
      - category-artists
      summary: Get an Artist's Albums
      description: Get Spotify catalog information about an artist's albums.
      operationId: get-an-artists-albums
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the artist."
      - name: include_groups
        in: query
        required: false
        schema:
          type: string
          description: "A comma-separated list of keywords that will be used to filter\
            \ the response. If not supplied, all album types will be returned.   \n\
            Valid values are:  \n- `album`  \n- `single`  \n- `appears_on`  \n- `compilation`\
            \  \nFor example: `include_groups=album,single`."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first item to return. Default: 0 (the first\
            \ item). Use with limit to get the next set of items."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` OK and the response body contains an array of simplified [album\
            \ objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject)\
            \ (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))\
            \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  href:
                    type: string
                    description: A link to the Web API endpoint returning the full
                      result of the request
                  items:
                    type: array
                    description: The requested content
                    items:
                      $ref: '#/components/schemas/SimplifiedAlbumObject'
                  limit:
                    type: integer
                    description: The maximum number of items in the response (as set
                      in the query or by default).
                    format: int32
                  next:
                    type: string
                    description: URL to the next page of items. ( `null` if none)
                  offset:
                    type: integer
                    description: The offset of the items returned (as set in the query
                      or by default)
                    format: int32
                  previous:
                    type: string
                    description: URL to the previous page of items. ( `null` if none)
                  total:
                    type: integer
                    description: The total number of items available to return.
                    format: int32
      security:
      - oauth_2_0: []
  /artists/{id}/related-artists:
    get:
      tags:
      - category-artists
      summary: Get an Artist's Related Artists
      description: "Get Spotify catalog information about artists similar to a given\
        \ artist. Similarity is based on analysis of the Spotify community's [listening\
        \ history](http://news.spotify.com/se/2010/02/03/related-artists/)."
      operationId: get-an-artists-related-artists
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the artist."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` OK and the response body contains an object whose key is `\"artists\"\
            ` and whose value is an array of up to 20 [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject)\
            \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistsObject'
      security:
      - oauth_2_0: []
  /artists/{id}/top-tracks:
    get:
      tags:
      - category-artists
      summary: Get an Artist's Top Tracks
      description: Get Spotify catalog information about an artist's top tracks by
        country.
      operationId: get-an-artists-top-tracks
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the artist."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` OK and the response body contains an object whose key is `\"tracks\"\
            ` and whose value is an array of up to 10 [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)\
            \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TracksObject'
      security:
      - oauth_2_0: []
  /artists:
    get:
      tags:
      - category-artists
      summary: Get Multiple Artists
      description: Get Spotify catalog information for several artists based on their
        Spotify IDs.
      operationId: get-multiple-artists
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the artists. Maximum: 50 IDs."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `"artists"` and whose value is an array of [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) in JSON format.

            Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistsObject'
      security:
      - oauth_2_0: []
  /browse/categories/{category_id}/playlists:
    get:
      tags:
      - category-browse
      summary: Get a Category's Playlists
      description: Get a list of Spotify playlists tagged with a particular category.
      operationId: get-a-categories-playlists
      parameters:
      - name: category_id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify category ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the category."
      - name: country
        in: query
        required: false
        schema:
          type: string
          description: "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ Provide this parameter to ensure that the category exists for a particular\
            \ country."
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first item to return. Default: 0 (the first\
            \ item). Use with limit to get the next set of items."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).

            Once you have retrieved the list, you can use [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) and [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) to drill down further.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistPagingObject'
      security:
      - oauth_2_0: []
  /browse/categories/{category_id}:
    get:
      tags:
      - category-browse
      summary: Get a Category
      description: "Get a single category used to tag items in Spotify (on, for example,\
        \ the Spotify player's \"Browse\" tab)."
      operationId: get-a-category
      parameters:
      - name: category_id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify category ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the category."
      - name: country
        in: query
        required: false
        schema:
          type: string
          description: "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ Provide this parameter to ensure that the category exists for a particular\
            \ country."
      - name: locale
        in: query
        required: false
        schema:
          type: string
          description: "The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1)\
            \ language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2),\
            \ joined by an underscore. For example: `es_MX`, meaning \"Spanish (Mexico)\"\
            . Provide this parameter if you want the category strings returned in\
            \ a particular language.  \n***Note** : if `locale` is not supplied, or\
            \ if the specified language is not available, the category strings returned\
            \ will be in the Spotify default language (American English).*"
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains a [category object](#categoryobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).

            Once you have retrieved the category, you can use [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) to drill down further.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryObject'
      security:
      - oauth_2_0: []
  /browse/categories:
    get:
      tags:
      - category-browse
      summary: Get All Categories
      description: "Get a list of categories used to tag items in Spotify (on, for\
        \ example, the Spotify player's \"Browse\" tab)."
      operationId: get-categories
      parameters:
      - name: country
        in: query
        required: false
        schema:
          type: string
          description: "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ Provide this parameter if you want to narrow the list of returned categories\
            \ to those relevant to a particular country. If omitted, the returned\
            \ items will be globally relevant."
      - name: locale
        in: query
        required: false
        schema:
          type: string
          description: "The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1)\
            \ language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2),\
            \ joined by an underscore. For example: `es_MX`, meaning \"Spanish (Mexico)\"\
            . Provide this parameter if you want the category metadata returned in\
            \ a particular language.   \n***Note** : if `locale` is not supplied,\
            \ or if the specified language is not available, all strings will be returned\
            \ in the Spotify default language (American English). The `locale` parameter,\
            \ combined with the `country` parameter, may give odd results if not carefully\
            \ matched. For example `country=SE&locale=de_DE` will return a list of\
            \ categories relevant to Sweden but as German language strings.*"
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first item to return. Default: 0 (the first\
            \ item). Use with limit to get the next set of items."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains an object with a `categories` field, with an array of [category objects](#categoryobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).

            Once you have retrieved the list, you can use [Get a Category](https://developer.spotify.com/web-api/get-category/) to drill down further.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesObject'
      security:
      - oauth_2_0: []
  /browse/featured-playlists:
    get:
      tags:
      - category-browse
      summary: Get All Featured Playlists
      description: "Get a list of Spotify featured playlists (shown, for example,\
        \ on a Spotify player's 'Browse' tab)."
      operationId: get-featured-playlists
      parameters:
      - name: country
        in: query
        required: false
        schema:
          type: string
          description: "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ Provide this parameter if you want the list of returned items to be\
            \ relevant to a particular country. If omitted, the returned items will\
            \ be relevant to all countries."
      - name: locale
        in: query
        required: false
        schema:
          type: string
          description: "The desired language, consisting of a lowercase [ISO 639-1\
            \ language code](http://en.wikipedia.org/wiki/ISO_639-1) and an uppercase\
            \ [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2),\
            \ joined by an underscore. For example: `es_MX`, meaning \"Spanish (Mexico)\"\
            . Provide this parameter if you want the results returned in a particular\
            \ language (where available).   \n***Note** : if `locale` is not supplied,\
            \ or if the specified language is not available, all strings will be returned\
            \ in the Spotify default language (American English). The `locale` parameter,\
            \ combined with the `country` parameter, may give odd results if not carefully\
            \ matched. For example `country=SE&locale=de_DE` will return a list of\
            \ categories relevant to Sweden but as German language strings.*"
      - name: timestamp
        in: query
        required: false
        schema:
          type: string
          description: "A timestamp in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601):\
            \ `yyyy-MM-ddTHH:mm:ss`. Use this parameter to specify the user's local\
            \ time to get results tailored for that specific date and time in the\
            \ day. If not provided, the response defaults to the current UTC time.\
            \ Example: \"2014-10-23T09:00:00\" for a user whose local time is 9AM.\
            \ If there were no featured playlists (or there is no data) at the specified\
            \ time, the response will revert to the current UTC time."
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first item to return. Default: 0 (the first\
            \ item). Use with limit to get the next set of items."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and a `playlists` object. The `playlists` object contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).

            Once you have retrieved the list of playlist objects, you can use [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) and [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) to drill down further.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturedPlaylistObject'
      security:
      - oauth_2_0: []
  /browse/new-releases:
    get:
      tags:
      - category-browse
      summary: Get All New Releases
      description: "Get a list of new album releases featured in Spotify (shown, for\
        \ example, on a Spotify player's \"Browse\" tab)."
      operationId: get-new-releases
      parameters:
      - name: country
        in: query
        required: false
        schema:
          type: string
          description: "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ Provide this parameter if you want the list of returned items to be\
            \ relevant to a particular country. If omitted, the returned items will\
            \ be relevant to all countries."
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first item to return. Default: 0 (the first\
            \ item). Use with limit to get the next set of items."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and an`albums` object. The `albums` object contains an array of simplified [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).

            Once you have retrieved the list, you can use [Get an Album's Tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-albums-tracks) to drill down further.

            The results are returned in an order reflected within the Spotify clients, and therefore may not be ordered by date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewReleasesObject'
      security:
      - oauth_2_0: []
  /recommendations/available-genre-seeds:
    get:
      tags:
      - category-browse
      summary: Get Recommendation Genres
      description: "Retrieve a list of available genres seed parameter values for\
        \ [recommendations](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recommendations)."
      operationId: get-recommendation-genres
      parameters: []
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200 OK` and the response body contains a recommendations response object\
            \ in JSON format."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreSeedsObject'
      security:
      - oauth_2_0: []
  /recommendations:
    get:
      tags:
      - category-browse
      summary: Get Recommendations
      description: "Recommendations are generated based on the available information\
        \ for a given seed entity and matched against similar artists and tracks.\
        \ If there is sufficient information about the provided seeds, a list of tracks\
        \ will be returned together with pool size details."
      operationId: get-recommendations
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The target size of the list of recommended tracks. For seeds\
            \ with unusually small pools or when highly restrictive filtering is applied,\
            \ it may be impossible to generate the requested number of recommended\
            \ tracks. Debugging information for such cases is available in the response.\
            \ Default: 20. Minimum: 1. Maximum: 100."
          format: int32
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      - name: seed_artists
        in: query
        required: true
        schema:
          type: string
          description: "A comma separated list of [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for seed artists. Up to 5 seed values may be provided in any combination\
            \ of `seed_artists`, `seed_tracks` and `seed_genres`."
      - name: seed_genres
        in: query
        required: true
        schema:
          type: string
          description: "A comma separated list of any genres in the set of [available\
            \ genre seeds](#available-genre-seeds). Up to 5 seed values may be provided\
            \ in any combination of `seed_artists`, `seed_tracks` and `seed_genres`."
      - name: seed_tracks
        in: query
        required: true
        schema:
          type: string
          description: "A comma separated list of [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for a seed track. Up to 5 seed values may be provided in any combination\
            \ of `seed_artists`, `seed_tracks` and `seed_genres`."
      - name: min_acousticness
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
      - name: max_acousticness
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
      - name: target_acousticness
        in: query
        required: false
        schema:
          type: number
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
      - name: min_danceability
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
      - name: max_danceability
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
      - name: target_danceability
        in: query
        required: false
        schema:
          type: number
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
      - name: min_duration_ms
        in: query
        required: false
        schema:
          type: integer
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          format: int32
      - name: max_duration_ms
        in: query
        required: false
        schema:
          type: integer
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          format: int32
      - name: target_duration_ms
        in: query
        required: false
        schema:
          type: integer
          description: Target duration of the track (ms)
          format: int32
      - name: min_energy
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
      - name: max_energy
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
      - name: target_energy
        in: query
        required: false
        schema:
          type: number
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
      - name: min_instrumentalness
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
      - name: max_instrumentalness
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
      - name: target_instrumentalness
        in: query
        required: false
        schema:
          type: number
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
      - name: min_key
        in: query
        required: false
        schema:
          type: integer
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          format: int32
      - name: max_key
        in: query
        required: false
        schema:
          type: integer
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          format: int32
      - name: target_key
        in: query
        required: false
        schema:
          type: integer
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          format: int32
      - name: min_liveness
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
      - name: max_liveness
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
      - name: target_liveness
        in: query
        required: false
        schema:
          type: number
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
      - name: min_loudness
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
      - name: max_loudness
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
      - name: target_loudness
        in: query
        required: false
        schema:
          type: number
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
      - name: min_mode
        in: query
        required: false
        schema:
          type: integer
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          format: int32
      - name: max_mode
        in: query
        required: false
        schema:
          type: integer
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          format: int32
      - name: target_mode
        in: query
        required: false
        schema:
          type: integer
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          format: int32
      - name: min_popularity
        in: query
        required: false
        schema:
          type: integer
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          format: int32
      - name: max_popularity
        in: query
        required: false
        schema:
          type: integer
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          format: int32
      - name: target_popularity
        in: query
        required: false
        schema:
          type: integer
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          format: int32
      - name: min_speechiness
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
      - name: max_speechiness
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
      - name: target_speechiness
        in: query
        required: false
        schema:
          type: number
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
      - name: min_tempo
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
      - name: max_tempo
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
      - name: target_tempo
        in: query
        required: false
        schema:
          type: number
          description: Target tempo (BPM)
      - name: min_time_signature
        in: query
        required: false
        schema:
          type: integer
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          format: int32
      - name: max_time_signature
        in: query
        required: false
        schema:
          type: integer
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          format: int32
      - name: target_time_signature
        in: query
        required: false
        schema:
          type: integer
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          format: int32
      - name: min_valence
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
      - name: max_valence
        in: query
        required: false
        schema:
          type: number
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
      - name: target_valence
        in: query
        required: false
        schema:
          type: number
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200 OK` and the response body contains a recommendations response object\
            \ in JSON format."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationsObject'
      security:
      - oauth_2_0: []
  /episodes/{id}:
    get:
      tags:
      - category-episodes
      summary: Get an Episode
      description: |-
        Get Spotify catalog information for a single episode identified by its
        unique Spotify ID.
      operationId: get-an-episode
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the episode."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200`\nOK and the response body contains an [episode object](https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject)\n\
            in JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\n\
            and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
            \  \n\nIf an episode is unavailable in the given `market` the HTTP status\
            \ code in the response header is `404` NOT FOUND."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpisodeObject'
      security:
      - oauth_2_0:
        - user-read-playback-position
  /episodes:
    get:
      tags:
      - category-episodes
      summary: Get Multiple Episodes
      description: Get Spotify catalog information for several episodes based on their
        Spotify IDs.
      operationId: get-multiple-episodes
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the episodes. Maximum: 50 IDs."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200`
            OK and the response body contains an object whose key is `episodes` and whose
            value is an array of [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject)
            in JSON format.

            Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position.
            Duplicate `ids` in the query will result in duplicate objects in the response. If an episode is unavailable in the given `market`, a `null` value is returned.
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpisodesObject'
      security:
      - oauth_2_0:
        - user-read-playback-position
  /me/following/contains:
    get:
      tags:
      - category-follow
      summary: Get Following State for Artists/Users
      description: Check to see if the current user is following one or more artists
        or other Spotify users.
      operationId: check-current-user-follows
      parameters:
      - name: type
        in: query
        required: true
        schema:
          type: string
          description: "The ID type: either `artist` or `user`."
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the artist or the user [Spotify\
            \ IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ to check. For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`.\
            \ A maximum of 50 IDs can be sent in one request."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                type: array
                items:
                  type: boolean
      security:
      - oauth_2_0:
        - user-follow-read
  /playlists/{playlist_id}/followers/contains:
    get:
      tags:
      - category-follow
      summary: Check if Users Follow a Playlist
      description: Check to see if one or more Spotify users are following a specified
        playlist.
      operationId: check-if-user-follows-playlist
      parameters:
      - name: playlist_id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist."
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of [Spotify User IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ ; the ids of the users that you want to check to see if they follow\
            \ the playlist. Maximum: 5 ids."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                type: array
                items:
                  type: boolean
      security:
      - oauth_2_0:
        - playlist-read-private
  /me/following:
    get:
      tags:
      - category-follow
      summary: Get User's Followed Artists
      description: Get the current user's followed artists.
      operationId: get-followed
      parameters:
      - name: type
        in: query
        required: true
        schema:
          type: string
          description: "The ID type: currently only `artist` is supported."
      - name: after
        in: query
        required: false
        schema:
          type: string
          description: The last artist ID retrieved from the previous request.
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains an `artists` object.
            The `artists` object in turn contains a [cursor-based paging object](https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject) of [Artists](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject).
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowingArtistsObject'
      security:
      - oauth_2_0:
        - user-follow-read
    put:
      tags:
      - category-follow
      summary: Follow Artists or Users
      description: Add the current user as a follower of one or more artists or other
        Spotify users.
      operationId: follow-artists-users
      parameters:
      - name: type
        in: query
        required: true
        schema:
          type: string
          description: The ID type.
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the artist or the user [Spotify\
            \ IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ A maximum of 50 IDs can be sent in one request."
      requestBody:
        content:
          application/json:
            schema:
              required:
              - ids
              type: object
              properties:
                ids:
                  type: array
                  description: "A JSON array of the artist or user [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
                    \ For example: `{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"\
                    ]}`. A maximum of 50 IDs can be sent in one request. ***Note**\
                    \ : if the `ids` parameter is present in the query string, any\
                    \ IDs listed here in the body will be ignored.*"
                  items:
                    type: string
        required: true
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "204":
          description: |-
            On success, the HTTP status code in the response header is `204` No Content and the response body is empty.
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
      security:
      - oauth_2_0:
        - user-follow-modify
    delete:
      tags:
      - category-follow
      summary: Unfollow Artists or Users
      description: Remove the current user as a follower of one or more artists or
        other Spotify users.
      operationId: unfollow-artists-users
      parameters:
      - name: type
        in: query
        required: true
        schema:
          type: string
          description: "The ID type: either `artist` or `user`."
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the artist or the user [Spotify\
            \ IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A\
            \ maximum of 50 IDs can be sent in one request."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: "A JSON array of the artist or user [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
                    \ For example: `{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"\
                    ]}`. A maximum of 50 IDs can be sent in one request. ***Note**\
                    \ : if the `ids` parameter is present in the query string, any\
                    \ IDs listed here in the body will be ignored.*"
                  items:
                    type: string
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "204":
          description: |-
            On success, the HTTP status code in the response header is `204` No Content and the response body is empty.
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
      security:
      - oauth_2_0:
        - user-follow-modify
  /playlists/{playlist_id}/followers:
    put:
      tags:
      - category-follow
      summary: Follow a Playlist
      description: Add the current user as a follower of a playlist.
      operationId: follow-playlist
      parameters:
      - name: playlist_id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                public:
                  type: boolean
                  description: "Defaults to `true`. If `true` the playlist will be\
                    \ included in user's public playlists, if `false` it will remain\
                    \ private."
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body is empty.
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
      security:
      - oauth_2_0:
        - playlist-modify-private
        - playlist-modify-public
    delete:
      tags:
      - category-follow
      summary: Unfollow Playlist
      description: Remove the current user as a follower of a playlist.
      operationId: unfollow-playlist
      parameters:
      - name: playlist_id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body is empty.
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
      security:
      - oauth_2_0:
        - playlist-modify-private
        - playlist-modify-public
  /me/albums/contains:
    get:
      tags:
      - category-library
      summary: Check User's Saved Albums
      description: Check if one or more albums is already saved in the current Spotify
        user's 'Your Music' library.
      operationId: check-users-saved-albums
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the albums. Maximum: 20 IDs."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                type: array
                items:
                  type: boolean
      security:
      - oauth_2_0:
        - user-library-read
  /me/episodes/contains:
    get:
      tags:
      - category-library
      summary: Check User's Saved Episodes
      description: "Check if one or more episodes is already saved in the current\
        \ Spotify user's 'Your Episodes' library.  \n\nThis API endpoint is in **beta**\
        \ and could change without warning. Please share any feedback that you have,\
        \ or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).."
      operationId: check-users-saved-episodes
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the episodes. Maximum: 50 IDs."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                type: array
                items:
                  type: boolean
      security:
      - oauth_2_0:
        - user-library-read
  /me/shows/contains:
    get:
      tags:
      - category-library
      summary: Check User's Saved Shows
      description: Check if one or more shows is already saved in the current Spotify
        user's library.
      operationId: check-users-saved-shows
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the shows. Maximum: 50 IDs."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` OK and the response body contains a JSON array of `true`or `false`\
            \ values, in the same order in which the `ids` were specified. On error,\
            \ the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details)."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: boolean
      security:
      - oauth_2_0:
        - user-library-read
  /me/tracks/contains:
    get:
      tags:
      - category-library
      summary: Check User's Saved Tracks
      description: Check if one or more tracks is already saved in the current Spotify
        user's 'Your Music' library.
      operationId: check-users-saved-tracks
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum:\
            \ 50 IDs."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                type: array
                items:
                  type: boolean
      security:
      - oauth_2_0:
        - user-library-read
  /me/albums:
    get:
      tags:
      - category-library
      summary: Get User's Saved Albums
      description: Get a list of the albums saved in the current Spotify user's 'Your
        Music' library.
      operationId: get-users-saved-albums
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first item to return. Default: 0 (the first\
            \ item). Use with limit to get the next set of items."
          format: int32
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved album objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. Each album object is accompanied by a [timestamp](https://developer.spotify.com/documentation/web-api/#timestamps) (`added_at`) to show when it was added. There is also an **etag** in the header that can be used in future [conditional requests](https://developer.spotify.com/documentation/web-api/#conditional-requests).

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                type: object
                properties:
                  href:
                    type: string
                    description: A link to the Web API endpoint returning the full
                      result of the request
                  items:
                    type: array
                    description: The requested content
                    items:
                      $ref: '#/components/schemas/SavedAlbumObject'
                  limit:
                    type: integer
                    description: The maximum number of items in the response (as set
                      in the query or by default).
                    format: int32
                  next:
                    type: string
                    description: URL to the next page of items. ( `null` if none)
                  offset:
                    type: integer
                    description: The offset of the items returned (as set in the query
                      or by default)
                    format: int32
                  previous:
                    type: string
                    description: URL to the previous page of items. ( `null` if none)
                  total:
                    type: integer
                    description: The total number of items available to return.
                    format: int32
      security:
      - oauth_2_0:
        - user-library-read
    put:
      tags:
      - category-library
      summary: Save Albums for Current User
      description: Save one or more albums to the current user's 'Your Music' library.
      operationId: save-albums-user
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the albums. Maximum: 20 IDs."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
                    \ For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"\
                    ]`  \nA maximum of 50 items can be specified in one request. ***Note**\
                    \ : if the `ids` parameter is present in the query string, any\
                    \ IDs listed here in the body will be ignored.*"
                  items:
                    type: string
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "201":
          description: "On success, the HTTP status code in the response header is\
            \ `201` Created. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
            \ Trying to add an album when you do not have the user's authorization\
            \ returns error `403` Forbidden."
      security:
      - oauth_2_0:
        - user-library-modify
    delete:
      tags:
      - category-library
      summary: Remove Albums for Current User
      description: Remove one or more albums from the current user's 'Your Music'
        library.
      operationId: remove-albums-user
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the albums. Maximum: 20 IDs."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
                    \ For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"\
                    ]`  \nA maximum of 50 items can be specified in one request. ***Note**\
                    \ : if the `ids` parameter is present in the query string, any\
                    \ IDs listed here in the body will be ignored.*"
                  items:
                    type: string
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
            \ Trying to remove an album when you do not have the user's authorization\
            \ returns error `403` Forbidden."
      security:
      - oauth_2_0:
        - user-library-modify
  /me/episodes:
    get:
      tags:
      - category-library
      summary: Get User's Saved Episodes
      description: "Get a list of the episodes saved in the current Spotify user's\
        \ library.  \n\nThis API endpoint is in **beta** and could change without\
        \ warning. Please share any feedback that you have, or issues that you discover,\
        \ in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)."
      operationId: get-users-saved-episodes
      parameters:
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first item to return. Default: 0 (the first\
            \ item). Use with limit to get the next set of items."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "- On success, the HTTP status code in the response header\
            \ is `200` OK and the response body contains an array of [saved episode\
            \ objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedepisodeobject)\
            \ (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))\
            \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  href:
                    type: string
                    description: A link to the Web API endpoint returning the full
                      result of the request
                  items:
                    type: array
                    description: The requested content
                    items:
                      $ref: '#/components/schemas/SavedEpisodeObject'
                  limit:
                    type: integer
                    description: The maximum number of items in the response (as set
                      in the query or by default).
                    format: int32
                  next:
                    type: string
                    description: URL to the next page of items. ( `null` if none)
                  offset:
                    type: integer
                    description: The offset of the items returned (as set in the query
                      or by default)
                    format: int32
                  previous:
                    type: string
                    description: URL to the previous page of items. ( `null` if none)
                  total:
                    type: integer
                    description: The total number of items available to return.
                    format: int32
      security:
      - oauth_2_0:
        - user-library-read
    put:
      tags:
      - category-library
      summary: Save Episodes for User
      description: "Save one or more episodes to the current user's library.  \n\n\
        This API endpoint is in **beta** and could change without warning. Please\
        \ share any feedback that you have, or issues that you discover, in our [developer\
        \ community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)."
      operationId: save-episodes-user
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ Maximum: 50 IDs."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
                    \   \nA maximum of 50 items can be specified in one request. ***Note**\
                    \ : if the `ids` parameter is present in the query string, any\
                    \ IDs listed here in the body will be ignored.*"
                  items:
                    type: string
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
            \ Trying to add an episode when you do not have the user's authorization,\
            \ returns error `403` Forbidden."
      security:
      - oauth_2_0:
        - user-library-modify
    delete:
      tags:
      - category-library
      summary: Remove User's Saved Episodes
      description: "Remove one or more episodes from the current user's library. \
        \ \n\nThis API endpoint is in **beta** and could change without warning. Please\
        \ share any feedback that you have, or issues that you discover, in our [developer\
        \ community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)."
      operationId: remove-episodes-user
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum:\
            \ 50 IDs."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
                    \   \nA maximum of 50 items can be specified in one request. ***Note**\
                    \ : if the `ids` parameter is present in the query string, any\
                    \ IDs listed here in the body will be ignored.*"
                  items:
                    type: string
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
            \ Trying to remove an episode when you do not have the user's authorization\
            \ returns error `403` Forbidden."
      security:
      - oauth_2_0:
        - user-library-modify
  /me/shows:
    get:
      tags:
      - category-library
      summary: Get User's Saved Shows
      description: Get a list of shows saved in the current Spotify user's library.
        Optional parameters can be used to limit the number of shows returned.
      operationId: get-users-saved-shows
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first item to return. Default: 0 (the first\
            \ item). Use with limit to get the next set of items."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved show objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedshowobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format.
            If the current user has no shows saved, the response will be an empty array. If a show is unavailable in the given `market` it is filtered out. The `total` field in the paging object represents the number of all items, filtered or not, and thus might be larger than the actual total number of observable items.
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).
          content:
            application/json:
              schema:
                type: object
                properties:
                  href:
                    type: string
                    description: A link to the Web API endpoint returning the full
                      result of the request
                  items:
                    type: array
                    description: The requested content
                    items:
                      $ref: '#/components/schemas/SavedShowObject'
                  limit:
                    type: integer
                    description: The maximum number of items in the response (as set
                      in the query or by default).
                    format: int32
                  next:
                    type: string
                    description: URL to the next page of items. ( `null` if none)
                  offset:
                    type: integer
                    description: The offset of the items returned (as set in the query
                      or by default)
                    format: int32
                  previous:
                    type: string
                    description: URL to the previous page of items. ( `null` if none)
                  total:
                    type: integer
                    description: The total number of items available to return.
                    format: int32
      security:
      - oauth_2_0:
        - user-library-read
    put:
      tags:
      - category-library
      summary: Save Shows for Current User
      description: Save one or more shows to current Spotify user's library.
      operationId: save-shows-user
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the shows. Maximum: 50 IDs."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
                    \  \nA maximum of 50 items can be specified in one request. *Note:\
                    \ if the `ids` parameter is present in the query string, any IDs\
                    \ listed here in the body will be ignored.*"
                  items:
                    type: string
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).\
            \ A `403 Forbidden` while trying to add a show when you do not have the\
            \ user's authorisation or when the user already has have over 10,000 items\
            \ saved in library."
      security:
      - oauth_2_0:
        - user-library-modify
    delete:
      tags:
      - category-library
      summary: Remove User's Saved Shows
      description: Delete one or more shows from current Spotify user's library.
      operationId: remove-shows-user
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the shows. Maximum: 50 IDs."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
                    \  \nA maximum of 50 items can be specified in one request. *Note:\
                    \ if the `ids` parameter is present in the query string, any IDs\
                    \ listed here in the body will be ignored.*"
                  items:
                    type: string
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK.
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details). A `403 Forbidden` while trying to add a show when you do not have the user's authorisation.
      security:
      - oauth_2_0:
        - user-library-modify
  /me/tracks:
    get:
      tags:
      - category-library
      summary: Get User's Saved Tracks
      description: Get a list of the songs saved in the current Spotify user's 'Your
        Music' library.
      operationId: get-users-saved-tracks
      parameters:
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first item to return. Default: 0 (the first\
            \ item). Use with limit to get the next set of items."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` OK and the response body contains an array of [saved track objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedtrackobject)\
            \ (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))\
            \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  href:
                    type: string
                    description: A link to the Web API endpoint returning the full
                      result of the request
                  items:
                    type: array
                    description: The requested content
                    items:
                      $ref: '#/components/schemas/SavedTrackObject'
                  limit:
                    type: integer
                    description: The maximum number of items in the response (as set
                      in the query or by default).
                    format: int32
                  next:
                    type: string
                    description: URL to the next page of items. ( `null` if none)
                  offset:
                    type: integer
                    description: The offset of the items returned (as set in the query
                      or by default)
                    format: int32
                  previous:
                    type: string
                    description: URL to the previous page of items. ( `null` if none)
                  total:
                    type: integer
                    description: The total number of items available to return.
                    format: int32
      security:
      - oauth_2_0:
        - user-library-read
    put:
      tags:
      - category-library
      summary: Save Tracks for User
      description: Save one or more tracks to the current user's 'Your Music' library.
      operationId: save-tracks-user
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum:\
            \ 50 IDs."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
                    \ For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"\
                    ]`  \nA maximum of 50 items can be specified in one request. ***Note**\
                    \ : if the `ids` parameter is present in the query string, any\
                    \ IDs listed here in the body will be ignored.*"
                  items:
                    type: string
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
            \ Trying to add a track when you do not have the user's authorization,\
            \ or when you have over 10.000 tracks in Your Music, returns error `403`\
            \ Forbidden."
      security:
      - oauth_2_0:
        - user-library-modify
    delete:
      tags:
      - category-library
      summary: Remove User's Saved Tracks
      description: Remove one or more tracks from the current user's 'Your Music'
        library.
      operationId: remove-tracks-user
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum:\
            \ 50 IDs."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
                    \ For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"\
                    ]`  \nA maximum of 50 items can be specified in one request. ***Note**\
                    \ : if the `ids` parameter is present in the query string, any\
                    \ IDs listed here in the body will be ignored.*"
                  items:
                    type: string
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
            \ Trying to remove an album when you do not have the user's authorization\
            \ returns error `403` Forbidden."
      security:
      - oauth_2_0:
        - user-library-modify
  /markets:
    get:
      tags:
      - category-markets
      summary: Get Available Markets
      description: Get the list of markets where Spotify is available.
      operationId: get-available-markets
      parameters: []
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ 200 OK and the response body contains a list of the countries in which\
            \ Spotify is available, identified by their [ISO 3166-1 alpha-2 country\
            \ code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) with additional\
            \ country codes for special territories. On error, the header status code\
            \ is an error code and the response body contains an error object."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketsObject'
      security:
      - oauth_2_0: []
  /me/top/{type}:
    get:
      tags:
      - category-personalization
      summary: Get a User's Top Artists and Tracks
      description: Get the current user's top artists or tracks based on calculated
        affinity.
      operationId: get-users-top-artists-and-tracks
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
          description: "The type of entity to return. Valid values: `artists` or `tracks`"
      - name: time_range
        in: query
        required: false
        schema:
          type: string
          description: "Over what time frame the affinities are computed. Valid values:\
            \ `long_term` (calculated from several years of data and including all\
            \ new data as it becomes available), `medium_term` (approximately last\
            \ 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`"
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first item to return. Default: 0 (the first\
            \ item). Use with limit to get the next set of items."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200 OK` and the response body contains a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)\
            \ of [Artists](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject)\
            \ or [Tracks](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject).\
            \ On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  href:
                    type: string
                    description: A link to the Web API endpoint returning the full
                      result of the request
                  items:
                    type: array
                    description: The requested content
                    items:
                      oneOf:
                      - $ref: '#/components/schemas/ArtistObject'
                      - $ref: '#/components/schemas/TrackObject'
                  limit:
                    type: integer
                    description: The maximum number of items in the response (as set
                      in the query or by default).
                    format: int32
                  next:
                    type: string
                    description: URL to the next page of items. ( `null` if none)
                  offset:
                    type: integer
                    description: The offset of the items returned (as set in the query
                      or by default)
                    format: int32
                  previous:
                    type: string
                    description: URL to the previous page of items. ( `null` if none)
                  total:
                    type: integer
                    description: The total number of items available to return.
                    format: int32
      security:
      - oauth_2_0:
        - user-top-read
  /me/player/queue:
    post:
      tags:
      - category-player
      summary: Add an item to queue
      description: Add an item to the end of the user's current playback queue.
      operationId: add-to-queue
      parameters:
      - name: uri
        in: query
        required: true
        schema:
          type: string
          description: The uri of the item to add to the queue. Must be a track or
            an episode uri.
      - name: device_id
        in: query
        required: false
        schema:
          type: string
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "204":
          description: |-
            A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

            If the device is not found, the request will return `404 NOT FOUND` response code.

            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
      security:
      - oauth_2_0:
        - user-modify-playback-state
  /me/player/devices:
    get:
      tags:
      - category-player
      summary: Get a User's Available Devices
      description: Get information about a user's available devices.
      operationId: get-a-users-available-devices
      parameters: []
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            A successful request will return a `200 OK` response code with a json payload that contains the device objects (see below).
            When no available devices are found, the request will return a 200 OK response with an empty devices list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicesObject'
      security:
      - oauth_2_0:
        - user-read-playback-state
  /me/player:
    get:
      tags:
      - category-player
      summary: Get Information About The User's Current Playback
      description: "Get information about the user's current playback state, including\
        \ track or episode, progress, and active device."
      operationId: get-information-about-the-users-current-playback
      parameters:
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      - name: additional_types
        in: query
        required: false
        schema:
          type: string
          description: "A comma-separated list of item types that your client supports\
            \ besides the default `track` type. Valid types are: `track` and `episode`.\
            \  \n***Note**: This parameter was introduced to allow existing clients\
            \ to maintain their current behaviour and might be deprecated in the future.*\
            \   \nIn addition to providing this parameter, make sure that your client\
            \ properly handles cases of new types in the future by checking against\
            \ the `type` field of each object."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            A successful request will return a `200 OK` response code with a json payload that contains information about the current playback. The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.
            When no available devices are found, the request will return a `200 OK` response but with no data populated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentlyPlayingContextObject'
        "204":
          description: |-
            A successful request will return a `200 OK` response code with a json payload that contains information about the current playback. The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.
            When no available devices are found, the request will return a `200 OK` response but with no data populated.
      security:
      - oauth_2_0:
        - user-read-playback-state
    put:
      tags:
      - category-player
      summary: Transfer a User's Playback
      description: Transfer playback to a new device and determine if it should start
        playing.
      operationId: transfer-a-users-playback
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
              - device_ids
              type: object
              properties:
                device_ids:
                  type: array
                  description: "A JSON array containing the ID of the device on which\
                    \ playback should be started/transferred.  \nFor example:`{device_ids:[\"\
                    74ASZWbe4lXaubB36ztrGX\"]}`  \n***Note** : Although an array is\
                    \ accepted, only a single device_id is currently supported. Supplying\
                    \ more than one will return `400 Bad Request`*"
                  items:
                    type: string
                play:
                  type: boolean
                  description: "**true** : ensure playback happens on new device.\
                    \  \n**false** or not provided: keep the current playback state."
        required: true
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "204":
          description: |-
            A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

            If the device is not found, the request will return `404 NOT FOUND` response code.

            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
      security:
      - oauth_2_0:
        - user-modify-playback-state
  /me/player/recently-played:
    get:
      tags:
      - category-player
      summary: Get Current User's Recently Played Tracks
      description: |-
        Get tracks from the current user's recently played tracks.
        ***Note**: Currently doesn't support podcast episodes.*
      operationId: get-recently-played
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: after
        in: query
        required: false
        schema:
          type: integer
          description: "A Unix timestamp in milliseconds. Returns all items after\
            \ (but not including) this cursor position. If `after` is specified, `before`\
            \ must not be specified."
          format: int32
      - name: before
        in: query
        required: false
        schema:
          type: integer
          description: "A Unix timestamp in milliseconds. Returns all items before\
            \ (but not including) this cursor position. If `before` is specified,\
            \ `after` must not be specified."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [play history objects](#play-history-object) (wrapped in a [cursor-based paging object](#cursor-based-paging-object)) in JSON format. The play history items each contain the context the track was played from (e.g. playlist, album), the date and time the track was played, and a [track object (simplified)](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject). On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).

            If private session is enabled the response will be a `204 NO CONTENT` with an empty payload.
          content:
            application/json:
              schema:
                type: object
                properties:
                  cursors:
                    description: The cursors used to find the next set of items.
                    allOf:
                    - $ref: '#/components/schemas/CursorObject'
                  href:
                    type: string
                    description: A link to the Web API endpoint returning the full
                      result of the request.
                  items:
                    type: array
                    description: The requested data.
                    items:
                      $ref: '#/components/schemas/PlayHistoryObject'
                  limit:
                    type: integer
                    description: The maximum number of items in the response (as set
                      in the query or by default).
                    format: int32
                  next:
                    type: string
                    description: URL to the next page of items. ( `null` if none)
                  total:
                    type: integer
                    description: The total number of items available to return.
                    format: int32
        "204":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [play history objects](#play-history-object) (wrapped in a [cursor-based paging object](#cursor-based-paging-object)) in JSON format. The play history items each contain the context the track was played from (e.g. playlist, album), the date and time the track was played, and a [track object (simplified)](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject). On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).

            If private session is enabled the response will be a `204 NO CONTENT` with an empty payload.
      security:
      - oauth_2_0:
        - user-read-recently-played
  /me/player/currently-playing:
    get:
      tags:
      - category-player
      summary: Get the User's Currently Playing Track
      description: Get the object currently being played on the user's Spotify account.
      operationId: get-the-users-currently-playing-track
      parameters:
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      - name: additional_types
        in: query
        required: false
        schema:
          type: string
          description: "A comma-separated list of item types that your client supports\
            \ besides the default `track` type. Valid types are: `track` and `episode`.\
            \  \n***Note**: This parameter was introduced to allow existing clients\
            \ to maintain their current behaviour and might be deprecated in the future.*\
            \   \nIn addition to providing this parameter, make sure that your client\
            \ properly handles cases of new types in the future by checking against\
            \ the `type` field of each object."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            A successful request will return a `200 OK` response code with a json payload that contains information about the currently playing track or episode and its context (see below). The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.

            When no available devices are found, the request will return a `200 OK` response but with no data populated.

            When no track is currently playing, the request will return a `204 NO CONTENT` response with no payload.

            If private session is enabled the response will be a `204 NO CONTENT` with an empty payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentlyPlayingObject'
        "204":
          description: |-
            A successful request will return a `200 OK` response code with a json payload that contains information about the currently playing track or episode and its context (see below). The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.

            When no available devices are found, the request will return a `200 OK` response but with no data populated.

            When no track is currently playing, the request will return a `204 NO CONTENT` response with no payload.

            If private session is enabled the response will be a `204 NO CONTENT` with an empty payload.
      security:
      - oauth_2_0:
        - user-read-currently-playing
  /me/player/pause:
    put:
      tags:
      - category-player
      summary: Pause a User's Playback
      description: Pause playback on the user's account.
      operationId: pause-a-users-playback
      parameters:
      - name: device_id
        in: query
        required: false
        schema:
          type: string
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "204":
          description: |-
            A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

            If the device is not found, the request will return `404 NOT FOUND` response code.

            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
      security:
      - oauth_2_0:
        - user-modify-playback-state
  /me/player/seek:
    put:
      tags:
      - category-player
      summary: Seek To Position In Currently Playing Track
      description: Seeks to the given position in the user's currently playing track.
      operationId: seek-to-position-in-currently-playing-track
      parameters:
      - name: position_ms
        in: query
        required: true
        schema:
          type: integer
          description: The position in milliseconds to seek to. Must be a positive
            number. Passing in a position that is greater than the length of the track
            will cause the player to start playing the next song.
          format: int32
      - name: device_id
        in: query
        required: false
        schema:
          type: string
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "204":
          description: |-
            A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

            If the device is not found, the request will return `404 NOT FOUND` response code.

            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
      security:
      - oauth_2_0:
        - user-modify-playback-state
  /me/player/repeat:
    put:
      tags:
      - category-player
      summary: Set Repeat Mode On User’s Playback
      description: |-
        Set the repeat mode for the user's playback. Options are repeat-track,
        repeat-context, and off.
      operationId: set-repeat-mode-on-users-playback
      parameters:
      - name: state
        in: query
        required: true
        schema:
          type: string
          description: "**track** , **context** or **off** .  \n**track** will repeat\
            \ the current track.  \n**context** will repeat the current context. \
            \ \n**off** will turn repeat off."
      - name: device_id
        in: query
        required: false
        schema:
          type: string
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "204":
          description: |-
            A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

            If the device is not found, the request will return `404 NOT FOUND` response code.

            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
      security:
      - oauth_2_0:
        - user-modify-playback-state
  /me/player/volume:
    put:
      tags:
      - category-player
      summary: Set Volume For User's Playback
      description: Set the volume for the user's current playback device.
      operationId: set-volume-for-users-playback
      parameters:
      - name: volume_percent
        in: query
        required: true
        schema:
          type: integer
          description: The volume to set. Must be a value from 0 to 100 inclusive.
          format: int32
      - name: device_id
        in: query
        required: false
        schema:
          type: string
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "204":
          description: |-
            A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

            If the device is not found, the request will return `404 NOT FOUND` response code.

            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
      security:
      - oauth_2_0:
        - user-modify-playback-state
  /me/player/next:
    post:
      tags:
      - category-player
      summary: Skip User’s Playback To Next Track
      description: Skips to next track in the user's queue.
      operationId: skip-users-playback-to-next-track
      parameters:
      - name: device_id
        in: query
        required: false
        schema:
          type: string
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "204":
          description: |-
            A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

            If the device is not found, the request will return `404 NOT FOUND` response code.

            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
      security:
      - oauth_2_0:
        - user-modify-playback-state
  /me/player/previous:
    post:
      tags:
      - category-player
      summary: Skip User’s Playback To Previous Track
      description: Skips to previous track in the user's queue.
      operationId: skip-users-playback-to-previous-track
      parameters:
      - name: device_id
        in: query
        required: false
        schema:
          type: string
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "204":
          description: |-
            A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

            If the device is not found, the request will return `404 NOT FOUND` response code.

            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
      security:
      - oauth_2_0:
        - user-modify-playback-state
  /me/player/play:
    put:
      tags:
      - category-player
      summary: Start/Resume a User's Playback
      description: Start a new context or resume current playback on the user's active
        device.
      operationId: start-a-users-playback
      parameters:
      - name: device_id
        in: query
        required: false
        schema:
          type: string
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                context_uri:
                  type: string
                  description: "Spotify URI of the context to play. Valid contexts\
                    \ are albums, artists, playlists. Example: {\"context_uri\": \"\
                    spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\"}"
                uris:
                  type: array
                  description: "A JSON array of the Spotify track URIs to play. For\
                    \ example: {\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\"\
                    , \"spotify:track:1301WleyT98MSxVHPZCA6M\"]}"
                  items:
                    type: string
                offset:
                  type: object
                  description: "Indicates from where in the context playback should\
                    \ start. Only available when context_uri corresponds to an album\
                    \ or playlist object, or when the uris parameter is used. “position”\
                    \ is zero based and can’t be negative. Example: \"offset\": {\"\
                    position\": 5} “uri” is a string representing the uri of the item\
                    \ to start at. Example: \"offset\": {\"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\"\
                    }"
                position_ms:
                  type: integer
                  description: Indicates from what position to start playback. Must
                    be a positive number. Passing in a position that is greater than
                    the length of the track will cause the player to start playing
                    the next song.
                  format: int32
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "204":
          description: |-
            A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

            If the device is not found, the request will return `404 NOT FOUND` response code.

            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
      security:
      - oauth_2_0:
        - user-modify-playback-state
  /me/player/shuffle:
    put:
      tags:
      - category-player
      summary: Toggle Shuffle For User’s Playback
      description: Toggle shuffle on or off for user's playback.
      operationId: toggle-shuffle-for-users-playback
      parameters:
      - name: state
        in: query
        required: true
        schema:
          type: boolean
          description: "**true** : Shuffle user's playback.  \n**false** : Do not\
            \ shuffle user's playback."
      - name: device_id
        in: query
        required: false
        schema:
          type: string
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "204":
          description: |-
            A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

            If the device is not found, the request will return `404 NOT FOUND` response code.

            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
      security:
      - oauth_2_0:
        - user-modify-playback-state
  /playlists/{playlist_id}/tracks:
    get:
      tags:
      - category-playlists
      summary: Get a Playlist's Items
      description: Get full details of the items of a playlist owned by a Spotify
        user.
      operationId: get-playlists-tracks
      parameters:
      - name: playlist_id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      - name: fields
        in: query
        required: false
        schema:
          type: string
          description: "Filters for the query: a comma-separated list of the fields\
            \ to return. If omitted, all fields are returned. For example, to get\
            \ just the total number of items and the request limit:  \n`fields=total,limit`\
            \  \nA dot separator can be used to specify non-reoccurring fields, while\
            \ parentheses can be used to specify reoccurring fields within objects.\
            \ For example, to get just the added date and user ID of the adder:  \n\
            `fields=items(added_at,added_by.id)`  \nUse multiple parentheses to drill\
            \ down into nested objects, for example:  \n`fields=items(track(name,href,album(name,href)))`\
            \  \nFields can be excluded by prefixing them with an exclamation mark,\
            \ for example:  \n`fields=items.track.album(!external_urls,images)`"
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first item to return. Default: 0 (the first\
            \ item). Use with limit to get the next set of items."
          format: int32
      - name: additional_types
        in: query
        required: false
        schema:
          type: string
          description: "A comma-separated list of item types that your client supports\
            \ besides the default `track` type. Valid types are: `track` and `episode`.\
            \  \n***Note**: This parameter was introduced to allow existing clients\
            \ to maintain their current behaviour and might be deprecated in the future.*\
            \   \nIn addition to providing this parameter, make sure that your client\
            \ properly handles cases of new types in the future by checking against\
            \ the `type` field of each object."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the response body contains an array of [track\
            \ objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject)\
            \ and [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject)\
            \ (depends on the `additional_types` parameter), wrapped in a [paging\
            \ object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)\
            \ in JSON format and the HTTP status code in the response header is `200`\
            \ OK. If an episode is unavailable in the given `market`, its information\
            \ will not be included in the response. On error, the header status code\
            \ is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
            \ Requesting playlists that you do not have the user's authorization to\
            \ access returns error `403` Forbidden."
          content:
            application/json:
              schema:
                type: object
                properties:
                  href:
                    type: string
                    description: A link to the Web API endpoint returning the full
                      result of the request
                  items:
                    type: array
                    description: The requested content
                    items:
                      $ref: '#/components/schemas/PlaylistTrackObject'
                  limit:
                    type: integer
                    description: The maximum number of items in the response (as set
                      in the query or by default).
                    format: int32
                  next:
                    type: string
                    description: URL to the next page of items. ( `null` if none)
                  offset:
                    type: integer
                    description: The offset of the items returned (as set in the query
                      or by default)
                    format: int32
                  previous:
                    type: string
                    description: URL to the previous page of items. ( `null` if none)
                  total:
                    type: integer
                    description: The total number of items available to return.
                    format: int32
      security:
      - oauth_2_0: []
    put:
      tags:
      - category-playlists
      summary: Reorder or Replace a Playlist's Items
      description: |-
        Either reorder or replace items in a playlist depending on the request's parameters.
        To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.
        To replace items, include `uris` as either a query parameter or in the request's body.
        Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.


        **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.
        These operations can't be applied together in a single request.
      operationId: reorder-or-replace-playlists-tracks
      parameters:
      - name: playlist_id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist."
      - name: uris
        in: query
        required: false
        schema:
          type: string
          description: "A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`\
            \  \nA maximum of 100 items can be set in one request."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uris:
                  type: array
                  description: "A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
                    \ to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`\
                    \  \nA maximum of 100 items can be set in one request."
                  items:
                    type: string
                range_start:
                  type: integer
                  description: The position of the first item to be reordered.
                  format: int32
                insert_before:
                  type: integer
                  description: "The position where the items should be inserted. \
                    \ \nTo reorder the items to the end of the playlist, simply set\
                    \ *insert_before* to the position after the last item.  \nExamples:\
                    \  \nTo reorder the first item to the last position in a playlist\
                    \ with 10 items, set *range_start* to 0, and *insert_before* to\
                    \ 10.  \nTo reorder the last item in a playlist with 10 items\
                    \ to the start of the playlist, set *range_start* to 9, and *insert_before*\
                    \ to 0."
                  format: int32
                range_length:
                  type: integer
                  description: "The amount of items to be reordered. Defaults to 1\
                    \ if not set.  \nThe range of items to be reordered begins from\
                    \ the *range_start* position, and includes the *range_length*\
                    \ subsequent items.  \nExample:  \nTo move the items at index\
                    \ 9-10 to the start of the playlist, *range_start* is set to 9,\
                    \ and *range_length* is set to 2."
                  format: int32
                snapshot_id:
                  type: string
                  description: The playlist's snapshot ID against which you want to
                    make the changes.
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format
            and the HTTP status code in the response header is `200` OK. The `snapshot_id`
            can be used to identify your playlist version in future requests.

            On a successful **replace** operation, the HTTP status code in the response header is `201`
            Created.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),
            the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),
            and the existing playlist is unmodified.
            Trying to set an item when you do not have the user's authorization returns error `403` Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotIdObject'
        "201":
          description: |-
            On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format
            and the HTTP status code in the response header is `200` OK. The `snapshot_id`
            can be used to identify your playlist version in future requests.

            On a successful **replace** operation, the HTTP status code in the response header is `201`
            Created.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),
            the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),
            and the existing playlist is unmodified.
            Trying to set an item when you do not have the user's authorization returns error `403` Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotIdObject'
      security:
      - oauth_2_0:
        - playlist-modify-private
        - playlist-modify-public
    post:
      tags:
      - category-playlists
      summary: Add Items to a Playlist
      description: Add one or more items to a user's playlist.
      operationId: add-tracks-to-playlist
      parameters:
      - name: playlist_id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist."
      - name: position
        in: query
        required: false
        schema:
          type: integer
          description: "The position to insert the items, a zero-based index. For\
            \ example, to insert the items in the first position: `position=0`; to\
            \ insert the items in the third position: `position=2`. If omitted, the\
            \ items will be appended to the playlist. Items are added in the order\
            \ they are listed in the query string or request body."
          format: int32
      - name: uris
        in: query
        required: false
        schema:
          type: string
          description: "A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ to add, can be track or episode URIs. For example:  \n`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,\
            \ spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`\
            \  \nA maximum of 100 items can be added in one request.   \n***Note**:\
            \ it is likely that passing a large number of item URIs as a query parameter\
            \ will exceed the maximum length of the request URI. When adding a large\
            \ number of items, it is recommended to pass them in the request body,\
            \ see below.*"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uris:
                  type: array
                  description: "A JSON array of the [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
                    \ to add. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\"\
                    ,\"spotify:track:1301WleyT98MSxVHPZCA6M\", \"spotify:episode:512ojhOuo1ktJprKbVcKyQ\"\
                    ]}`  \nA maximum of 100 items can be added in one request. ***Note**\
                    \ : if the `uris` parameter is present in the query string, any\
                    \ URIs listed here in the body will be ignored.*"
                  items:
                    type: string
                position:
                  type: integer
                  description: "The position to insert the items, a zero-based index.\
                    \ For example, to insert the items in the first position: `position=0`\
                    \ ; to insert the items in the third position: `position=2`. If\
                    \ omitted, the items will be appended to the playlist. Items are\
                    \ added in the order they appear in the uris array. For example:\
                    \ `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\",\"spotify:track:1301WleyT98MSxVHPZCA6M\"\
                    ], \"position\": 3}`"
                  format: int32
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "201":
          description: "On success, the HTTP status code in the response header is\
            \ `201` Created. The response body contains a `snapshot_id` in JSON format.\
            \ The `snapshot_id` can be used to identify your playlist version in future\
            \ requests. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
            \ Trying to add an item when you do not have the user's authorization,\
            \ or when there are more than 10.000 items in the playlist, returns error\
            \ `403` Forbidden."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotIdObject'
      security:
      - oauth_2_0:
        - playlist-modify-private
        - playlist-modify-public
    delete:
      tags:
      - category-playlists
      summary: Remove Items from a Playlist
      description: Remove one or more items from a user's playlist.
      operationId: remove-tracks-playlist
      parameters:
      - name: playlist_id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist."
      requestBody:
        content:
          application/json:
            schema:
              required:
              - tracks
              type: object
              properties:
                tracks:
                  type: array
                  description: "An array of objects containing [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
                    \ of the tracks or episodes to remove. For example: `{ \"tracks\"\
                    : [{ \"uri\": \"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\" },{ \"\
                    uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\" }] }`. A maximum\
                    \ of 100 objects can be sent at once."
                  items:
                    type: object
                snapshot_id:
                  type: string
                  description: "The playlist's snapshot ID against which you want\
                    \ to make the changes. The API will validate that the specified\
                    \ items exist and in the specified positions and make the changes,\
                    \ even if more recent changes have been made to the playlist."
        required: true
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the response body contains a `snapshot_id` in JSON format
            and the HTTP status code in the response header is `200` OK. The `snapshot_id`
            can be used to identify your playlist version in future requests.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
            Trying to remove an item when you do not have the user's authorization returns error `403` Forbidden.
            Attempting to use several different ways to remove items returns `400` Bad Request.
            Other client errors returning `400` Bad Request include specifying invalid positions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotIdObject'
      security:
      - oauth_2_0:
        - playlist-modify-private
        - playlist-modify-public
  /playlists/{playlist_id}:
    get:
      tags:
      - category-playlists
      summary: Get a Playlist
      description: Get a playlist owned by a Spotify user.
      operationId: get-playlist
      parameters:
      - name: playlist_id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      - name: fields
        in: query
        required: false
        schema:
          type: string
          description: "Filters for the query: a comma-separated list of the fields\
            \ to return. If omitted, all fields are returned. For example, to get\
            \ just the playlist''s description and URI: `fields=description,uri`.\
            \ A dot separator can be used to specify non-reoccurring fields, while\
            \ parentheses can be used to specify reoccurring fields within objects.\
            \ For example, to get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.\
            \ Use multiple parentheses to drill down into nested objects, for example:\
            \ `fields=tracks.items(track(name,href,album(name,href)))`. Fields can\
            \ be excluded by prefixing them with an exclamation mark, for example:\
            \ `fields=tracks.items(track(name,href,album(!name,href)))`"
      - name: additional_types
        in: query
        required: false
        schema:
          type: string
          description: "A comma-separated list of item types that your client supports\
            \ besides the default `track` type. Valid types are: `track` and `episode`.\
            \  \n***Note**: This parameter was introduced to allow existing clients\
            \ to maintain their current behaviour and might be deprecated in the future.*\
            \   \nIn addition to providing this parameter, make sure that your client\
            \ properly handles cases of new types in the future by checking against\
            \ the `type` field of each object."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the response body contains a [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)\
            \ in JSON format and the HTTP status code in the response header is `200`\
            \ OK. If an episode is unavailable in the given `market`, its information\
            \ will not be included in the response. On error, the header status code\
            \ is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
            \ Requesting playlists that you do not have the user's authorization to\
            \ access returns error `403` Forbidden."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistObject'
      security:
      - oauth_2_0: []
    put:
      tags:
      - category-playlists
      summary: Change a Playlist's Details
      description: |-
        Change a playlist's name and public/private state. (The user must, of
        course, own the playlist.)
      operationId: change-playlist-details
      parameters:
      - name: playlist_id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "The new name for the playlist, for example `\"My New\
                    \ Playlist Title\"`"
                public:
                  type: boolean
                  description: "If `true` the playlist will be public, if `false`\
                    \ it will be private."
                collaborative:
                  type: boolean
                  description: "If `true`, the playlist will become collaborative\
                    \ and other users will be able to modify the playlist in their\
                    \ Spotify client.   \n***Note** : You can only set `collaborative`\
                    \ to `true` on non-public playlists.*"
                description:
                  type: string
                  description: Value for playlist description as displayed in Spotify
                    Clients and in the Web API.
        required: false
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success the HTTP status code in the response header is `200` OK.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to change a playlist when you do not have the user's authorization returns error `403` Forbidden.
      security:
      - oauth_2_0:
        - playlist-modify-private
        - playlist-modify-public
  /users/{user_id}/playlists:
    get:
      tags:
      - category-playlists
      summary: Get a List of a User's Playlists
      description: Get a list of the playlists owned or followed by a Spotify user.
      operationId: get-list-users-playlists
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
          description: "The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)."
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first playlist to return. Default: 0 (the\
            \ first object). Maximum offset: 100.000. Use with `limit` to get the\
            \ next set of playlists."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` OK and the response body contains an array of simplified [playlist\
            \ objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject)\
            \ (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))\
            \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  href:
                    type: string
                    description: A link to the Web API endpoint returning the full
                      result of the request
                  items:
                    type: array
                    description: The requested content
                    items:
                      $ref: '#/components/schemas/SimplifiedPlaylistObject'
                  limit:
                    type: integer
                    description: The maximum number of items in the response (as set
                      in the query or by default).
                    format: int32
                  next:
                    type: string
                    description: URL to the next page of items. ( `null` if none)
                  offset:
                    type: integer
                    description: The offset of the items returned (as set in the query
                      or by default)
                    format: int32
                  previous:
                    type: string
                    description: URL to the previous page of items. ( `null` if none)
                  total:
                    type: integer
                    description: The total number of items available to return.
                    format: int32
      security:
      - oauth_2_0:
        - playlist-read-collaborative
        - playlist-read-private
    post:
      tags:
      - category-playlists
      summary: Create a Playlist
      description: |-
        Create a playlist for a Spotify user. (The playlist will be empty until
        you [add tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-tracks-to-playlist).)
      operationId: create-playlist
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
          description: "The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)."
      requestBody:
        content:
          application/json:
            schema:
              required:
              - name
              type: object
              properties:
                name:
                  type: string
                  description: "The name for the new playlist, for example `\"Your\
                    \ Coolest Playlist\"`. This name does not need to be unique; a\
                    \ user may have several playlists with the same name."
                public:
                  type: boolean
                  description: "Defaults to `true`. If `true` the playlist will be\
                    \ public, if `false` it will be private. To be able to create\
                    \ private playlists, the user must have granted the `playlist-modify-private`\
                    \ [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)"
                collaborative:
                  type: boolean
                  description: "Defaults to `false`. If `true` the playlist will be\
                    \ collaborative. ***Note** : to create a collaborative playlist\
                    \ you must also set `public` to `false`. To create collaborative\
                    \ playlists you must have granted `playlist-modify-private` and\
                    \ `playlist-modify-public` [scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).*"
                description:
                  type: string
                  description: value for playlist description as displayed in Spotify
                    Clients and in the Web API.
        required: true
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)
            in JSON format and the HTTP status code in the response header is `200` OK or
            `201` Created. There is also a `Location` response header giving the Web API
            endpoint for the new playlist.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistObject'
        "201":
          description: |-
            On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)
            in JSON format and the HTTP status code in the response header is `200` OK or
            `201` Created. There is also a `Location` response header giving the Web API
            endpoint for the new playlist.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistObject'
      security:
      - oauth_2_0:
        - playlist-modify-private
        - playlist-modify-public
  /me/playlists:
    get:
      tags:
      - category-playlists
      summary: Get a List of Current User's Playlists
      description: |-
        Get a list of the playlists owned or followed by the current Spotify
        user.
      operationId: get-a-list-of-current-users-playlists
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "'The index of the first playlist to return. Default: 0 (the\
            \ first object). Maximum offset: 100.000. Use with `limit` to get the\
            \ next set of playlists.'"
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` OK and the response body contains an array of simplified [playlist\
            \ objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject)\
            \ (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))\
            \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
            \ Please note that the access token has to be tied to a user."
          content:
            application/json:
              schema:
                type: object
                properties:
                  href:
                    type: string
                    description: A link to the Web API endpoint returning the full
                      result of the request
                  items:
                    type: array
                    description: The requested content
                    items:
                      $ref: '#/components/schemas/SimplifiedPlaylistObject'
                  limit:
                    type: integer
                    description: The maximum number of items in the response (as set
                      in the query or by default).
                    format: int32
                  next:
                    type: string
                    description: URL to the next page of items. ( `null` if none)
                  offset:
                    type: integer
                    description: The offset of the items returned (as set in the query
                      or by default)
                    format: int32
                  previous:
                    type: string
                    description: URL to the previous page of items. ( `null` if none)
                  total:
                    type: integer
                    description: The total number of items available to return.
                    format: int32
      security:
      - oauth_2_0:
        - playlist-read-collaborative
        - playlist-read-private
  /playlists/{playlist_id}/images:
    get:
      tags:
      - category-playlists
      summary: Get a Playlist Cover Image
      description: Get the current image associated with a specific playlist.
      operationId: get-playlist-cover
      parameters:
      - name: playlist_id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the response body contains a list of [image objects](https://developer.spotify.com/documentation/web-api/reference/#object-imageobject)\
            \ in JSON format and the HTTP status code in the response header is `200`\
            \ OK  \nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImageObject'
      security:
      - oauth_2_0: []
    put:
      tags:
      - category-playlists
      summary: Upload a Custom Playlist Cover Image
      description: Replace the image used to represent a specific playlist.
      operationId: upload-custom-playlist-cover
      parameters:
      - name: playlist_id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist."
      requestBody:
        description: The new cover image of the playlist as a Base64 encoded JPEG
          image. Maximum payload size is 256KB.
        content:
          image/jpeg:
            schema:
              type: string
              format: base64
        required: true
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "202":
          description: |-
            If you get status code `429`, it means that you have sent too many requests.
            If this happens, have a look in the `Retry-After` header, where you will see a number displayed.
            This is the amount of seconds that you need to wait, before you can retry sending your requests.
      security:
      - oauth_2_0:
        - playlist-modify-private
        - playlist-modify-public
        - ugc-image-upload
  /search:
    get:
      tags:
      - category-search
      summary: Search for an Item
      description: |-
        Get Spotify Catalog information about albums, artists, playlists, tracks, shows or episodes
        that match a keyword string.
      operationId: search
      parameters:
      - name: q
        in: query
        required: true
        schema:
          type: string
          description: "Search [query](#writing-a-query---guidelines) keywords and\
            \ optional field filters and operators.   \nFor example:   \n`q=roadhouse%20blues`."
      - name: type
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of item types to search across.   \n\
            Valid types are: `album`, `artist`, `playlist`, `track`, `show` and `episode`.\
            \   \nSearch results include hits from all the specified item types. \
            \  \nFor example: `q=name:abacab&type=album,track` returns both albums\
            \ ***and*** tracks with \"abacab\" included in their name."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "Maximum number of results to return.   \nDefault: 20   \n\
            Minimum: 1   \nMaximum: 50   \n**Note** : The limit is applied within\
            \ each type, not on the total response.   \nFor example, if the limit\
            \ value is 3 and the type is `artist,album`, the response contains 3 artists\
            \ and 3 albums."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first result to return.   \nDefault: 0 (the\
            \ first result).   \nMaximum offset (including limit): 1,000.   \nUse\
            \ with limit to get the next page of search results."
          format: int32
      - name: include_external
        in: query
        required: false
        schema:
          type: string
          description: "Possible values: *audio*   \nIf *include_external=audio* is\
            \ specified the response will include any relevant audio content that\
            \ is hosted externally.   \nBy default external content is filtered out\
            \ from responses."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            **On success**:

            - In the response ***header*** the HTTP status code is `200` OK.
            - For each type provided in the `type` parameter, the response ***body*** contains an array of [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) / [simplified album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) / [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject) / [simplified show objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject) / [simplified episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON.

            **On error**:

            - The ***header*** status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes).
            - The response ***body*** contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponseObject'
      security:
      - oauth_2_0:
        - user-read-private
  /shows/{id}:
    get:
      tags:
      - category-shows
      summary: Get a Show
      description: |-
        Get Spotify catalog information for a single show identified by its
        unique Spotify ID.
      operationId: get-a-show
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the show."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200`\nOK and the response body contains a [show object](https://developer.spotify.com/documentation/web-api/reference/#object-showobject)\n\
            in JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\n\
            and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
            \  \n\nIf a show is unavailable in the given `market` the HTTP status\
            \ code in the response header is `404` NOT FOUND."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowObject'
      security:
      - oauth_2_0:
        - user-read-playback-position
  /shows/{id}/episodes:
    get:
      tags:
      - category-shows
      summary: Get a Show's Episodes
      description: Get Spotify catalog information about an show's episodes. Optional
        parameters can be used to limit the number of episodes returned.
      operationId: get-a-shows-episodes
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the show."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          format: int32
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          description: "The index of the first item to return. Default: 0 (the first\
            \ item). Use with limit to get the next set of items."
          format: int32
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` OK and the response body contains an array of [simplified episode\
            \ objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject)\
            \ (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))\
            \ in JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).\
            \  \n\nIf a show is unavailable in the given `market` the HTTP status\
            \ code in the response header is `404` NOT FOUND. Unavailable episodes\
            \ are filtered out."
          content:
            application/json:
              schema:
                type: object
                properties:
                  href:
                    type: string
                    description: A link to the Web API endpoint returning the full
                      result of the request
                  items:
                    type: array
                    description: The requested content
                    items:
                      $ref: '#/components/schemas/SimplifiedEpisodeObject'
                  limit:
                    type: integer
                    description: The maximum number of items in the response (as set
                      in the query or by default).
                    format: int32
                  next:
                    type: string
                    description: URL to the next page of items. ( `null` if none)
                  offset:
                    type: integer
                    description: The offset of the items returned (as set in the query
                      or by default)
                    format: int32
                  previous:
                    type: string
                    description: URL to the previous page of items. ( `null` if none)
                  total:
                    type: integer
                    description: The total number of items available to return.
                    format: int32
      security:
      - oauth_2_0:
        - user-read-playback-position
  /shows:
    get:
      tags:
      - category-shows
      summary: Get Multiple Shows
      description: Get Spotify catalog information for several shows based on their
        Spotify IDs.
      operationId: get-multiple-shows
      parameters:
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the shows. Maximum: 50 IDs."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200`
            OK and the response body contains an object whose key is `shows` and whose
            value is an array of [simple show object](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject)
            in JSON format.

            Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. If a show is unavailable in the given `market`, a `null` value is returned. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowsObject'
      security:
      - oauth_2_0:
        - user-read-playback-position
  /audio-analysis/{id}:
    get:
      tags:
      - category-tracks
      summary: Get Audio Analysis for a Track
      description: |-
        Get a detailed audio analysis for a single track identified by its unique
        Spotify ID.
      operationId: get-audio-analysis
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the track."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200 OK` and the response body contains an audio analysis object in\
            \ JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioAnalysisObject'
      security:
      - oauth_2_0: []
  /audio-features/{id}:
    get:
      tags:
      - category-tracks
      summary: Get Audio Features for a Track
      description: |-
        Get audio feature information for a single track identified by its unique
        Spotify ID.
      operationId: get-audio-features
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the track."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200 OK` and the response body contains an [audio features object](https://developer.spotify.com/documentation/web-api/reference/#object-audiofeaturesobject)\
            \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioFeaturesObject'
      security:
      - oauth_2_0: []
  /audio-features:
    get:
      tags:
      - category-tracks
      summary: Get Audio Features for Several Tracks
      description: Get audio features for multiple tracks based on their Spotify IDs.
      operationId: get-several-audio-features
      parameters:
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the tracks. Maximum: 100 IDs."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200 OK`
            and the response body contains an object whose key is `"audio_features"` and
            whose value is an array of audio features objects in JSON format.

            Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioFeaturesArrayObject'
      security:
      - oauth_2_0: []
  /tracks:
    get:
      tags:
      - category-tracks
      summary: Get Several Tracks
      description: Get Spotify catalog information for multiple tracks based on their
        Spotify IDs.
      operationId: get-several-tracks
      parameters:
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      - name: ids
        in: query
        required: true
        schema:
          type: string
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum:\
            \ 50 IDs."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200`
            OK and the response body contains an object whose key is `tracks` and whose
            value is an array of [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)
            in JSON format.

            Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TracksObject'
      security:
      - oauth_2_0: []
  /tracks/{id}:
    get:
      tags:
      - category-tracks
      summary: Get a Track
      description: |-
        Get Spotify catalog information for a single track identified by its
        unique Spotify ID.
      operationId: get-track
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the track."
      - name: market
        in: query
        required: false
        schema:
          type: string
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n***Note**: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200`
            OK and the response body contains a [track object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)
            in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackObject'
      security:
      - oauth_2_0: []
  /me:
    get:
      tags:
      - category-users-profile
      summary: Get Current User's Profile
      description: |-
        Get detailed profile information about the current user (including the
        current user's username).
      operationId: get-current-users-profile
      parameters: []
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains a [user object](https://developer.spotify.com/documentation/web-api/reference/#object-privateuserobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). When requesting fields that you don't have the user's authorization to access, it will return error `403` Forbidden.

            **Important!** If the `user-read-email` scope is authorized, the returned JSON will include the email address that was entered when the user created their Spotify account. **This email address is unverified**; do not assume that the email address belongs to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserObject'
      security:
      - oauth_2_0:
        - user-read-email
        - user-read-private
  /users/{user_id}:
    get:
      tags:
      - category-users-profile
      summary: Get a User's Profile
      description: Get public profile information about a Spotify user.
      operationId: get-users-profile
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
          description: "The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)."
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        "200":
          description: "On success, the HTTP status code in the response header is\
            \ `200` OK and the response body contains a [user object](https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject)\
            \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
            \ If a user with that user_id doesn't exist, the status code is `404`\
            \ NOT FOUND."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserObject'
      security:
      - oauth_2_0: []
components:
  schemas:
    AlbumObject:
      type: object
      properties:
        album_type:
          type: string
          description: The type of the album.
        artists:
          type: array
          description: The artists of the album. Each artist object includes a link
            in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/ArtistObject'
        available_markets:
          type: array
          description: "The markets in which the album is available: [ISO 3166-1 alpha-2\
            \ country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Note\
            \ that an album is considered available in a market when at least one\
            \ of its tracks is available in that market."
          items:
            type: string
        copyrights:
          type: array
          description: The copyright statements of the album.
          items:
            $ref: '#/components/schemas/CopyrightObject'
        external_ids:
          description: Known external IDs for the album.
          allOf:
          - $ref: '#/components/schemas/ExternalIdObject'
        external_urls:
          description: Known external URLs for this album.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        genres:
          type: array
          description: "A list of the genres used to classify the album. (If not yet\
            \ classified, the array is empty.)"
          items:
            type: string
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            album.
        id:
          type: string
          description: The Spotify ID for the album.
        images:
          type: array
          description: "The cover art for the album in various sizes, widest first."
          items:
            $ref: '#/components/schemas/ImageObject'
        label:
          type: string
          description: The label for the album.
        name:
          type: string
          description: "The name of the album. In case of an album takedown, the value\
            \ may be an empty string."
        popularity:
          type: integer
          description: "The popularity of the album, with 100 being the most popular.\
            \ The popularity is calculated from the popularity of the album's individual\
            \ tracks."
          format: int32
        release_date:
          type: string
          description: "The date the album was first released. Depending on the precision,\
            \ it might be shown as \"1981\" or \"1981-12\"."
        release_date_precision:
          type: string
          description: The precision with which release_date value is known.
        restrictions:
          description: "Included in the response when a content restriction is applied.\
            \ See [Restriction Object](https://developer.spotify.com/documentation/web-api/reference/#object-albumrestrictionobject)\
            \ for more details."
          allOf:
          - $ref: '#/components/schemas/AlbumRestrictionObject'
        total_tracks:
          type: integer
          description: The total number of tracks in the album.
          format: int32
        tracks:
          type: object
          properties:
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request
            items:
              type: array
              description: The requested content
              items:
                $ref: '#/components/schemas/SimplifiedTrackObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            offset:
              type: integer
              description: The offset of the items returned (as set in the query or
                by default)
              format: int32
            previous:
              type: string
              description: URL to the previous page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: The tracks of the album.
        type:
          type: string
          description: The object type.
        uri:
          type: string
          description: The Spotify URI for the album.
    AlbumRestrictionObject:
      type: object
      properties:
        reason:
          type: string
          description: "The reason for the restriction. Albums may be restricted if\
            \ the content is not available in a given market, to the user's subscription\
            \ type, or when the user's account is set to not play explicit content.\
            \ Additional reasons may be added in the future."
    AlbumsObject:
      type: object
      properties:
        albums:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/AlbumObject'
    ArtistObject:
      type: object
      properties:
        external_urls:
          description: Known external URLs for this artist.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        followers:
          description: Information about the followers of the artist.
          allOf:
          - $ref: '#/components/schemas/FollowersObject'
        genres:
          type: array
          description: "A list of the genres the artist is associated with. If not\
            \ yet classified, the array is empty."
          items:
            type: string
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            artist.
        id:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the artist."
        images:
          type: array
          description: "Images of the artist in various sizes, widest first."
          items:
            $ref: '#/components/schemas/ImageObject'
        name:
          type: string
          description: The name of the artist.
        popularity:
          type: integer
          description: "The popularity of the artist. The value will be between 0\
            \ and 100, with 100 being the most popular. The artist's popularity is\
            \ calculated from the popularity of all the artist's tracks."
          format: int32
        type:
          type: string
          description: The object type.
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the artist."
    ArtistsObject:
      type: object
      properties:
        artists:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/ArtistObject'
    AudioAnalysisObject:
      type: object
      properties:
        bars:
          type: array
          description: "The time intervals of the bars throughout the track. A bar\
            \ (or measure) is a segment of time defined as a given number of beats.\
            \ Bar offsets also indicate downbeats, the first beat of the measure."
          items:
            $ref: '#/components/schemas/TimeIntervalObject'
        beats:
          type: array
          description: "The time intervals of beats throughout the track. A beat is\
            \ the basic time unit of a piece of music; for example, each tick of a\
            \ metronome. Beats are typically multiples of tatums."
          items:
            $ref: '#/components/schemas/TimeIntervalObject'
        sections:
          type: array
          description: "Sections are defined by large variations in rhythm or timbre,\
            \ e.g. chorus, verse, bridge, guitar solo, etc. Each section contains\
            \ its own descriptions of tempo, key, mode, time_signature, and loudness."
          items:
            $ref: '#/components/schemas/SectionObject'
        segments:
          type: array
          description: "Audio segments attempts to subdivide a song into many segments,\
            \ with each segment containing a roughly consistent sound throughout its\
            \ duration."
          items:
            $ref: '#/components/schemas/SegmentObject'
        tatums:
          type: array
          description: A tatum represents the lowest regular pulse train that a listener
            intuitively infers from the timing of perceived musical events (segments).
          items:
            $ref: '#/components/schemas/TimeIntervalObject'
    AudioFeaturesArrayObject:
      type: object
      properties:
        audio_features:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/AudioFeaturesObject'
    AudioFeaturesObject:
      type: object
      properties:
        acousticness:
          type: number
          description: A confidence measure from 0.0 to 1.0 of whether the track is
            acoustic. 1.0 represents high confidence the track is acoustic.
        analysis_url:
          type: string
          description: A URL to access the full audio analysis of this track. An access
            token is required to access this data.
        danceability:
          type: number
          description: "Danceability describes how suitable a track is for dancing\
            \ based on a combination of musical elements including tempo, rhythm stability,\
            \ beat strength, and overall regularity. A value of 0.0 is least danceable\
            \ and 1.0 is most danceable."
        duration_ms:
          type: integer
          description: The duration of the track in milliseconds.
          format: int32
        energy:
          type: number
          description: "Energy is a measure from 0.0 to 1.0 and represents a perceptual\
            \ measure of intensity and activity. Typically, energetic tracks feel\
            \ fast, loud, and noisy. For example, death metal has high energy, while\
            \ a Bach prelude scores low on the scale. Perceptual features contributing\
            \ to this attribute include dynamic range, perceived loudness, timbre,\
            \ onset rate, and general entropy."
        id:
          type: string
          description: The Spotify ID for the track.
        instrumentalness:
          type: number
          description: "Predicts whether a track contains no vocals. \"Ooh\" and \"\
            aah\" sounds are treated as instrumental in this context. Rap or spoken\
            \ word tracks are clearly \"vocal\". The closer the instrumentalness value\
            \ is to 1.0, the greater likelihood the track contains no vocal content.\
            \ Values above 0.5 are intended to represent instrumental tracks, but\
            \ confidence is higher as the value approaches 1.0."
        key:
          type: integer
          description: "The key the track is in. Integers map to pitches using standard\
            \ [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g.\
            \ 0 = C, 1 = C♯/D♭, 2 = D, and so on."
          format: int32
        liveness:
          type: number
          description: Detects the presence of an audience in the recording. Higher
            liveness values represent an increased probability that the track was
            performed live. A value above 0.8 provides strong likelihood that the
            track is live.
        loudness:
          type: number
          description: The overall loudness of a track in decibels (dB). Loudness
            values are averaged across the entire track and are useful for comparing
            relative loudness of tracks. Loudness is the quality of a sound that is
            the primary psychological correlate of physical strength (amplitude).
            Values typical range between -60 and 0 db.
        mode:
          type: integer
          description: "Mode indicates the modality (major or minor) of a track, the\
            \ type of scale from which its melodic content is derived. Major is represented\
            \ by 1 and minor is 0."
          format: int32
        speechiness:
          type: number
          description: "Speechiness detects the presence of spoken words in a track.\
            \ The more exclusively speech-like the recording (e.g. talk show, audio\
            \ book, poetry), the closer to 1.0 the attribute value. Values above 0.66\
            \ describe tracks that are probably made entirely of spoken words. Values\
            \ between 0.33 and 0.66 describe tracks that may contain both music and\
            \ speech, either in sections or layered, including such cases as rap music.\
            \ Values below 0.33 most likely represent music and other non-speech-like\
            \ tracks."
        tempo:
          type: number
          description: "The overall estimated tempo of a track in beats per minute\
            \ (BPM). In musical terminology, tempo is the speed or pace of a given\
            \ piece and derives directly from the average beat duration."
        time_signature:
          type: integer
          description: An estimated overall time signature of a track. The time signature
            (meter) is a notational convention to specify how many beats are in each
            bar (or measure).
          format: int32
        track_href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            track.
        type:
          type: string
          description: The object type.
        uri:
          type: string
          description: The Spotify URI for the track.
        valence:
          type: number
          description: "A measure from 0.0 to 1.0 describing the musical positiveness\
            \ conveyed by a track. Tracks with high valence sound more positive (e.g.\
            \ happy, cheerful, euphoric), while tracks with low valence sound more\
            \ negative (e.g. sad, depressed, angry)."
    CategoriesObject:
      type: object
      properties:
        categories:
          type: object
          properties:
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request
            items:
              type: array
              description: The requested content
              items:
                $ref: '#/components/schemas/CategoryObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            offset:
              type: integer
              description: The offset of the items returned (as set in the query or
                by default)
              format: int32
            previous:
              type: string
              description: URL to the previous page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: ""
    CategoryObject:
      type: object
      properties:
        href:
          type: string
          description: A link to the Web API endpoint returning full details of the
            category.
        icons:
          type: array
          description: "The category icon, in various sizes."
          items:
            $ref: '#/components/schemas/ImageObject'
        id:
          type: string
          description: "The [Spotify category ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the category."
        name:
          type: string
          description: The name of the category.
    ContextObject:
      type: object
      properties:
        external_urls:
          description: External URLs for this context.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            track.
        type:
          type: string
          description: "The object type, e.g. \"artist\", \"playlist\", \"album\"\
            , \"show\"."
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the context."
    CopyrightObject:
      type: object
      properties:
        text:
          type: string
          description: The copyright text for this content.
        type:
          type: string
          description: "The type of copyright: `C` = the copyright, `P` = the sound\
            \ recording (performance) copyright."
    CurrentlyPlayingContextObject:
      type: object
      properties:
        actions:
          description: Allows to update the user interface based on which playback
            actions are available within the current context.
          allOf:
          - $ref: '#/components/schemas/DisallowsObject'
        context:
          description: A Context Object. Can be `null`.
          allOf:
          - $ref: '#/components/schemas/ContextObject'
        currently_playing_type:
          type: string
          description: "The object type of the currently playing item. Can be one\
            \ of `track`, `episode`, `ad` or `unknown`."
        device:
          description: The device that is currently active.
          allOf:
          - $ref: '#/components/schemas/DeviceObject'
        is_playing:
          type: boolean
          description: "If something is currently playing, return `true`."
        item:
          description: The currently playing track or episode. Can be `null`.
          oneOf:
          - $ref: '#/components/schemas/TrackObject'
          - $ref: '#/components/schemas/EpisodeObject'
        progress_ms:
          type: integer
          description: Progress into the currently playing track or episode. Can be
            `null`.
          format: int32
        repeat_state:
          type: string
          description: "off, track, context"
        shuffle_state:
          type: string
          description: If shuffle is on or off.
        timestamp:
          type: integer
          description: Unix Millisecond Timestamp when data was fetched.
          format: int32
    CurrentlyPlayingObject:
      type: object
      properties:
        context:
          description: A Context Object. Can be `null`.
          allOf:
          - $ref: '#/components/schemas/ContextObject'
        currently_playing_type:
          type: string
          description: "The object type of the currently playing item. Can be one\
            \ of `track`, `episode`, `ad` or `unknown`."
        is_playing:
          type: boolean
          description: "If something is currently playing, return `true`."
        item:
          description: The currently playing track or episode. Can be `null`.
          oneOf:
          - $ref: '#/components/schemas/TrackObject'
          - $ref: '#/components/schemas/EpisodeObject'
        progress_ms:
          type: integer
          description: Progress into the currently playing track or episode. Can be
            `null`.
          format: int32
        timestamp:
          type: integer
          description: Unix Millisecond Timestamp when data was fetched
          format: int32
    CursorObject:
      type: object
      properties:
        after:
          type: string
          description: The cursor to use as key to find the next page of items.
    CursorPagingObject:
      type: object
      properties:
        cursors:
          description: The cursors used to find the next set of items.
          allOf:
          - $ref: '#/components/schemas/CursorObject'
        href:
          type: string
          description: A link to the Web API endpoint returning the full result of
            the request.
        items:
          type: array
          description: The requested data.
          items:
            type: object
        limit:
          type: integer
          description: The maximum number of items in the response (as set in the
            query or by default).
          format: int32
        next:
          type: string
          description: URL to the next page of items. ( `null` if none)
        total:
          type: integer
          description: The total number of items available to return.
          format: int32
    DeviceObject:
      type: object
      properties:
        id:
          type: string
          description: The device ID.
        is_active:
          type: boolean
          description: If this device is the currently active device.
        is_private_session:
          type: boolean
          description: If this device is currently in a private session.
        is_restricted:
          type: boolean
          description: Whether controlling this device is restricted. At present if
            this is "true" then no Web API commands will be accepted by this device.
        name:
          type: string
          description: The name of the device.
        type:
          type: string
          description: "Device type, such as \"computer\", \"smartphone\" or \"speaker\"\
            ."
        volume_percent:
          type: integer
          description: The current volume in percent.
          format: int32
    DevicesObject:
      type: object
      properties:
        devices:
          type: array
          description: A list of 0..n Device objects
          items:
            $ref: '#/components/schemas/DeviceObject'
    DisallowsObject:
      type: object
      properties:
        interrupting_playback:
          type: boolean
          description: Interrupting playback. Optional field.
        pausing:
          type: boolean
          description: Pausing. Optional field.
        resuming:
          type: boolean
          description: Resuming. Optional field.
        seeking:
          type: boolean
          description: Seeking playback location. Optional field.
        skipping_next:
          type: boolean
          description: Skipping to the next context. Optional field.
        skipping_prev:
          type: boolean
          description: Skipping to the previous context. Optional field.
        toggling_repeat_context:
          type: boolean
          description: Toggling repeat context flag. Optional field.
        toggling_repeat_track:
          type: boolean
          description: Toggling repeat track flag. Optional field.
        toggling_shuffle:
          type: boolean
          description: Toggling shuffle flag. Optional field.
        transferring_playback:
          type: boolean
          description: Transfering playback between devices. Optional field.
    EpisodeObject:
      type: object
      properties:
        audio_preview_url:
          type: string
          description: A URL to a 30 second preview (MP3 format) of the episode. `null`
            if not available.
        description:
          type: string
          description: "A description of the episode. HTML tags are stripped away\
            \ from this field, use `html_description` field in case HTML tags are\
            \ needed."
        duration_ms:
          type: integer
          description: The episode length in milliseconds.
          format: int32
        explicit:
          type: boolean
          description: Whether or not the episode has explicit content (true = yes
            it does; false = no it does not OR unknown).
        external_urls:
          description: External URLs for this episode.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            episode.
        html_description:
          type: string
          description: A description of the episode. This field may contain HTML tags.
        id:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the episode."
        images:
          type: array
          description: "The cover art for the episode in various sizes, widest first."
          items:
            $ref: '#/components/schemas/ImageObject'
        is_externally_hosted:
          type: boolean
          description: True if the episode is hosted outside of Spotify's CDN.
        is_playable:
          type: boolean
          description: True if the episode is playable in the given market. Otherwise
            false.
        language:
          type: string
          description: "**Note: This field is deprecated and might be removed in the\
            \ future. Please use the `languages` field instead.** The language used\
            \ in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639)\
            \ code."
        languages:
          type: array
          description: "A list of the languages used in the episode, identified by\
            \ their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code."
          items:
            type: string
        name:
          type: string
          description: The name of the episode.
        release_date:
          type: string
          description: "The date the episode was first released, for example `\"1981-12-15\"\
            `. Depending on the precision, it might be shown as `\"1981\"` or `\"\
            1981-12\"`."
        release_date_precision:
          type: string
          description: The precision with which `release_date` value is known.
        restrictions:
          description: "Included in the response when a content restriction is applied.\
            \ See [Restriction Object](https://developer.spotify.com/documentation/web-api/reference/#object-episoderestrictionobject)\
            \ for more details."
          allOf:
          - $ref: '#/components/schemas/EpisodeRestrictionObject'
        resume_point:
          description: The user's most recent position in the episode. Set if the
            supplied access token is a user token and has the scope `user-read-playback-position`.
          allOf:
          - $ref: '#/components/schemas/ResumePointObject'
        show:
          description: The show on which the episode belongs.
          allOf:
          - $ref: '#/components/schemas/SimplifiedShowObject'
        type:
          type: string
          description: The object type.
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the episode."
    EpisodeRestrictionObject:
      type: object
      properties:
        reason:
          type: string
          description: "The reason for the restriction. Supported values:  \n\n- `market`\
            \ - The content item is not available in the given market.  \n- `product`\
            \ - The content item is not available for the user's subscription type.\
            \  \n- `explicit` - The content item is explicit and the user's account\
            \ is set to not play explicit content.  \n  Additional reasons may be\
            \ added in the future. **Note**: If you use this field, make sure that\
            \ your application safely handles unknown values."
    EpisodesObject:
      type: object
      properties:
        episodes:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/EpisodeObject'
    ErrorObject:
      type: object
      properties:
        message:
          type: string
          description: A short description of the cause of the error.
        status:
          type: integer
          description: "The HTTP status code (also returned in the response header;\
            \ see [Response Status Codes](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
            \ for more information)."
          format: int32
    ErrorResponseObject:
      type: object
      properties:
        error:
          description: ""
          allOf:
          - $ref: '#/components/schemas/ErrorObject'
    ExplicitContentSettingsObject:
      type: object
      properties:
        filter_enabled:
          type: boolean
          description: "When `true`, indicates that explicit content should not be\
            \ played."
        filter_locked:
          type: boolean
          description: "When `true`, indicates that the explicit content setting is\
            \ locked and can't be changed by the user."
    ExternalIdObject:
      type: object
      properties:
        ean:
          type: string
          description: "[International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)"
        isrc:
          type: string
          description: "[International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)"
        upc:
          type: string
          description: "[Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)"
    ExternalUrlObject:
      type: object
      properties:
        spotify:
          type: string
          description: "The [Spotify URL](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the object."
    FeaturedPlaylistObject:
      type: object
      properties:
        message:
          type: string
          description: ""
        playlists:
          type: object
          properties:
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request
            items:
              type: array
              description: The requested content
              items:
                $ref: '#/components/schemas/SimplifiedPlaylistObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            offset:
              type: integer
              description: The offset of the items returned (as set in the query or
                by default)
              format: int32
            previous:
              type: string
              description: URL to the previous page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: ""
    FollowersObject:
      type: object
      properties:
        href:
          type: string
          description: "This will always be set to null, as the Web API does not support\
            \ it at the moment."
        total:
          type: integer
          description: The total number of followers.
          format: int32
    FollowingArtistsObject:
      type: object
      properties:
        artists:
          type: object
          properties:
            cursors:
              description: The cursors used to find the next set of items.
              allOf:
              - $ref: '#/components/schemas/CursorObject'
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request.
            items:
              type: array
              description: The requested data.
              items:
                $ref: '#/components/schemas/ArtistObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: ""
    GenreSeedsObject:
      type: object
      properties:
        genres:
          type: array
          description: ""
          items:
            type: string
    ImageObject:
      type: object
      properties:
        height:
          type: integer
          description: The image height in pixels.
          format: int32
        url:
          type: string
          description: The source URL of the image.
        width:
          type: integer
          description: The image width in pixels.
          format: int32
    LinkedTrackObject:
      type: object
      properties:
        external_urls:
          description: Known external URLs for this track.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            track.
        id:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the track."
        type:
          type: string
          description: "The object type: \"track\"."
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the track."
    MarketsObject:
      type: object
      properties:
        markets:
          type: array
          description: ""
          items:
            type: string
    NewReleasesObject:
      type: object
      properties:
        albums:
          type: object
          properties:
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request
            items:
              type: array
              description: The requested content
              items:
                $ref: '#/components/schemas/SimplifiedAlbumObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            offset:
              type: integer
              description: The offset of the items returned (as set in the query or
                by default)
              format: int32
            previous:
              type: string
              description: URL to the previous page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: ""
    PagingObject:
      type: object
      properties:
        href:
          type: string
          description: A link to the Web API endpoint returning the full result of
            the request
        items:
          type: array
          description: The requested content
          items:
            type: object
        limit:
          type: integer
          description: The maximum number of items in the response (as set in the
            query or by default).
          format: int32
        next:
          type: string
          description: URL to the next page of items. ( `null` if none)
        offset:
          type: integer
          description: The offset of the items returned (as set in the query or by
            default)
          format: int32
        previous:
          type: string
          description: URL to the previous page of items. ( `null` if none)
        total:
          type: integer
          description: The total number of items available to return.
          format: int32
    PlayHistoryObject:
      type: object
      properties:
        context:
          description: The context the track was played from.
          allOf:
          - $ref: '#/components/schemas/ContextObject'
        played_at:
          type: string
          description: The date and time the track was played.
          format: date-time
        track:
          description: The track the user listened to.
          allOf:
          - $ref: '#/components/schemas/SimplifiedTrackObject'
    PlayerErrorObject:
      type: object
      properties:
        message:
          type: string
          description: A short description of the cause of the error.
        reason:
          type: string
          description: |-
            - `NO_PREV_TRACK` - The command requires a previous track, but there is none in the context.
            - `NO_NEXT_TRACK` - The command requires a next track, but there is none in the context.
            - `NO_SPECIFIC_TRACK` - The requested track does not exist.
            - `ALREADY_PAUSED` - The command requires playback to not be paused.
            - `NOT_PAUSED` - The command requires playback to be paused.
            - `NOT_PLAYING_LOCALLY` - The command requires playback on the local device.
            - `NOT_PLAYING_TRACK` - The command requires that a track is currently playing.
            - `NOT_PLAYING_CONTEXT` - The command requires that a context is currently playing.
            - `ENDLESS_CONTEXT` - The shuffle command cannot be applied on an endless context.
            - `CONTEXT_DISALLOW` - The command could not be performed on the context.
            - `ALREADY_PLAYING` - The track should not be restarted if the same track and context is already playing, and there is a resume point.
            - `RATE_LIMITED` - The user is rate limited due to too frequent track play, also known as cat-on-the-keyboard spamming.
            - `REMOTE_CONTROL_DISALLOW` - The context cannot be remote-controlled.
            - `DEVICE_NOT_CONTROLLABLE` - Not possible to remote control the device.
            - `VOLUME_CONTROL_DISALLOW` - Not possible to remote control the device's volume.
            - `NO_ACTIVE_DEVICE` - Requires an active device and the user has none.
            - `PREMIUM_REQUIRED` - The request is prohibited for non-premium users.
            - `UNKNOWN` - Certain actions are restricted because of unknown reasons.
        status:
          type: integer
          description: The HTTP status code. Either `404 NOT FOUND` or `403 FORBIDDEN`.
            Also returned in the response header.
          format: int32
    PlaylistObject:
      type: object
      properties:
        collaborative:
          type: boolean
          description: '`true` if the owner allows other users to modify the playlist.'
        description:
          type: string
          description: "The playlist description. *Only returned for modified, verified\
            \ playlists, otherwise* `null`."
        external_urls:
          description: Known external URLs for this playlist.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        followers:
          description: Information about the followers of the playlist.
          allOf:
          - $ref: '#/components/schemas/FollowersObject'
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            playlist.
        id:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the playlist."
        images:
          type: array
          description: "Images for the playlist. The array may be empty or contain\
            \ up to three images. The images are returned by size in descending order.\
            \ See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/).\
            \ ***Note** : If returned, the source URL for the image (`url`) is temporary\
            \ and will expire in less than a day.*"
          items:
            $ref: '#/components/schemas/ImageObject'
        name:
          type: string
          description: The name of the playlist.
        owner:
          description: The user who owns the playlist
          allOf:
          - $ref: '#/components/schemas/PublicUserObject'
        public:
          type: boolean
          description: "The playlist's public/private status: `true` the playlist\
            \ is public, `false` the playlist is private, `null` the playlist status\
            \ is not relevant. For more about public/private status, see [Working\
            \ with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)"
        snapshot_id:
          type: string
          description: The version identifier for the current playlist. Can be supplied
            in other requests to target a specific playlist version
        tracks:
          type: object
          properties:
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request
            items:
              type: array
              description: The requested content
              items:
                $ref: '#/components/schemas/PlaylistTrackObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            offset:
              type: integer
              description: The offset of the items returned (as set in the query or
                by default)
              format: int32
            previous:
              type: string
              description: URL to the previous page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: The tracks of the playlist.
        type:
          type: string
          description: "The object type: \"playlist\""
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the playlist."
    PlaylistPagingObject:
      type: object
      properties:
        playlists:
          type: object
          properties:
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request
            items:
              type: array
              description: The requested content
              items:
                $ref: '#/components/schemas/SimplifiedPlaylistObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            offset:
              type: integer
              description: The offset of the items returned (as set in the query or
                by default)
              format: int32
            previous:
              type: string
              description: URL to the previous page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: ""
    PlaylistTrackObject:
      type: object
      properties:
        added_at:
          type: string
          description: "The date and time the track or episode was added. ***Note**\
            \ : some very old playlists may return `null` in this field.*"
          format: date-time
        added_by:
          description: "The Spotify user who added the track or episode. ***Note**\
            \ : some very old playlists may return `null` in this field.*"
          allOf:
          - $ref: '#/components/schemas/PublicUserObject'
        is_local:
          type: boolean
          description: "Whether this track or episode is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/)\
            \ or not."
        track:
          description: Information about the track or episode.
          oneOf:
          - $ref: '#/components/schemas/TrackObject'
          - $ref: '#/components/schemas/EpisodeObject'
    PlaylistTracksRefObject:
      type: object
      properties:
        href:
          type: string
          description: A link to the Web API endpoint where full details of the playlist's
            tracks can be retrieved.
        total:
          type: integer
          description: Number of tracks in the playlist.
          format: int32
    PrivateUserObject:
      type: object
      properties:
        country:
          type: string
          description: "The country of the user, as set in the user's account profile.\
            \ An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ *This field is only available when the current user has granted access\
            \ to the [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ scope.*"
        display_name:
          type: string
          description: The name displayed on the user's profile. `null` if not available.
        email:
          type: string
          description: "The user's email address, as entered by the user when creating\
            \ their account. ***Important!** This email address is unverified; there\
            \ is no proof that it actually belongs to the user.* *This field is only\
            \ available when the current user has granted access to the [user-read-email](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ scope.*"
        explicit_content:
          description: "The user's explicit content settings. *This field is only\
            \ available when the current user has granted access to the [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ scope.*"
          allOf:
          - $ref: '#/components/schemas/ExplicitContentSettingsObject'
        external_urls:
          description: Known external URLs for this user.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        followers:
          description: Information about the followers of the user.
          allOf:
          - $ref: '#/components/schemas/FollowersObject'
        href:
          type: string
          description: A link to the Web API endpoint for this user.
        id:
          type: string
          description: "The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the user."
        images:
          type: array
          description: The user's profile image.
          items:
            $ref: '#/components/schemas/ImageObject'
        product:
          type: string
          description: "The user's Spotify subscription level: \"premium\", \"free\"\
            , etc. (The subscription level \"open\" can be considered the same as\
            \ \"free\".) *This field is only available when the current user has granted\
            \ access to the [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ scope.*"
        type:
          type: string
          description: "The object type: \"user\""
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the user."
    PublicUserObject:
      type: object
      properties:
        display_name:
          type: string
          description: The name displayed on the user's profile. `null` if not available.
        external_urls:
          description: Known public external URLs for this user.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        followers:
          description: Information about the followers of this user.
          allOf:
          - $ref: '#/components/schemas/FollowersObject'
        href:
          type: string
          description: A link to the Web API endpoint for this user.
        id:
          type: string
          description: "The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for this user."
        images:
          type: array
          description: The user's profile image.
          items:
            $ref: '#/components/schemas/ImageObject'
        type:
          type: string
          description: The object type.
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for this user."
    RecommendationSeedObject:
      type: object
      properties:
        afterFilteringSize:
          type: integer
          description: The number of tracks available after min_\* and max_\* filters
            have been applied.
          format: int32
        afterRelinkingSize:
          type: integer
          description: The number of tracks available after relinking for regional
            availability.
          format: int32
        href:
          type: string
          description: "A link to the full track or artist data for this seed. For\
            \ tracks this will be a link to a [Track Object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject).\
            \ For artists a link to [an Artist Object](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject).\
            \ For genre seeds, this value will be `null`."
        id:
          type: string
          description: "The id used to select this seed. This will be the same as\
            \ the string used in the `seed_artists`, `seed_tracks` or `seed_genres`\
            \ parameter."
        initialPoolSize:
          type: integer
          description: The number of recommended tracks available for this seed.
          format: int32
        type:
          type: string
          description: "The entity type of this seed. One of `artist`, `track` or\
            \ `genre`."
    RecommendationsObject:
      type: object
      properties:
        seeds:
          type: array
          description: "An array of [recommendation seed objects](https://developer.spotify.com/documentation/web-api/reference/#object-recommendationseedobject)."
          items:
            $ref: '#/components/schemas/RecommendationSeedObject'
        tracks:
          type: array
          description: "An array of [track object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)\
            \ ordered according to the parameters supplied."
          items:
            $ref: '#/components/schemas/TrackObject'
    ResumePointObject:
      type: object
      properties:
        fully_played:
          type: boolean
          description: Whether or not the episode has been fully played by the user.
        resume_position_ms:
          type: integer
          description: The user's most recent position in the episode in milliseconds.
          format: int32
    SavedAlbumObject:
      type: object
      properties:
        added_at:
          type: string
          description: "The date and time the album was saved Timestamps are returned\
            \ in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset:\
            \ YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time\
            \ of an album release), an additional field indicates the precision; see\
            \ for example, release_date in an album object."
          format: date-time
        album:
          description: Information about the album.
          allOf:
          - $ref: '#/components/schemas/AlbumObject'
    SavedEpisodeObject:
      type: object
      properties:
        added_at:
          type: string
          description: "The date and time the episode was saved. Timestamps are returned\
            \ in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset:\
            \ YYYY-MM-DDTHH:MM:SSZ."
          format: date-time
        episode:
          description: Information about the episode.
          allOf:
          - $ref: '#/components/schemas/EpisodeObject'
    SavedShowObject:
      type: object
      properties:
        added_at:
          type: string
          description: "The date and time the show was saved. Timestamps are returned\
            \ in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset:\
            \ YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time\
            \ of an album release), an additional field indicates the precision; see\
            \ for example, release_date in an album object."
          format: date-time
        show:
          description: Information about the show.
          allOf:
          - $ref: '#/components/schemas/SimplifiedShowObject'
    SavedTrackObject:
      type: object
      properties:
        added_at:
          type: string
          description: "The date and time the track was saved. Timestamps are returned\
            \ in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset:\
            \ YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time\
            \ of an album release), an additional field indicates the precision; see\
            \ for example, release_date in an album object."
          format: date-time
        track:
          description: Information about the track.
          allOf:
          - $ref: '#/components/schemas/TrackObject'
    SearchResponseObject:
      type: object
      properties:
        albums:
          type: object
          properties:
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request
            items:
              type: array
              description: The requested content
              items:
                $ref: '#/components/schemas/SimplifiedAlbumObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            offset:
              type: integer
              description: The offset of the items returned (as set in the query or
                by default)
              format: int32
            previous:
              type: string
              description: URL to the previous page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: ""
        artists:
          type: object
          properties:
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request
            items:
              type: array
              description: The requested content
              items:
                $ref: '#/components/schemas/ArtistObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            offset:
              type: integer
              description: The offset of the items returned (as set in the query or
                by default)
              format: int32
            previous:
              type: string
              description: URL to the previous page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: ""
        episodes:
          type: object
          properties:
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request
            items:
              type: array
              description: The requested content
              items:
                $ref: '#/components/schemas/SimplifiedEpisodeObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            offset:
              type: integer
              description: The offset of the items returned (as set in the query or
                by default)
              format: int32
            previous:
              type: string
              description: URL to the previous page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: ""
        playlists:
          type: object
          properties:
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request
            items:
              type: array
              description: The requested content
              items:
                $ref: '#/components/schemas/SimplifiedPlaylistObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            offset:
              type: integer
              description: The offset of the items returned (as set in the query or
                by default)
              format: int32
            previous:
              type: string
              description: URL to the previous page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: ""
        shows:
          type: object
          properties:
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request
            items:
              type: array
              description: The requested content
              items:
                $ref: '#/components/schemas/SimplifiedShowObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            offset:
              type: integer
              description: The offset of the items returned (as set in the query or
                by default)
              format: int32
            previous:
              type: string
              description: URL to the previous page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: ""
        tracks:
          type: object
          properties:
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request
            items:
              type: array
              description: The requested content
              items:
                $ref: '#/components/schemas/TrackObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            offset:
              type: integer
              description: The offset of the items returned (as set in the query or
                by default)
              format: int32
            previous:
              type: string
              description: URL to the previous page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: ""
    SectionObject:
      type: object
      properties:
        confidence:
          type: number
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ section’s \"designation\"."
        duration:
          type: number
          description: The duration (in seconds) of the section.
        key:
          type: integer
          description: ""
          format: int32
        key_confidence:
          type: number
          description: ""
        loudness:
          type: number
          description: The overall loudness of the section in decibels (dB). Loudness
            values are useful for comparing relative loudness of sections within tracks.
        mode:
          type: integer
          description: ""
          format: int32
        mode_confidence:
          type: number
          description: ""
        start:
          type: number
          description: The starting point (in seconds) of the section.
        tempo:
          type: number
          description: "The overall estimated tempo of the section in beats per minute\
            \ (BPM). In musical terminology, tempo is the speed or pace of a given\
            \ piece and derives directly from the average beat duration."
        tempo_confidence:
          type: number
          description: ""
        time_signature:
          type: integer
          description: ""
          format: int32
        time_signature_confidence:
          type: number
          description: ""
    SegmentObject:
      type: object
      properties:
        confidence:
          type: number
          description: ""
        duration:
          type: number
          description: ""
        loudness_end:
          type: number
          description: ""
        loudness_max:
          type: number
          description: ""
        loudness_max_time:
          type: number
          description: ""
        loudness_start:
          type: number
          description: ""
        pitches:
          type: array
          description: ""
          items:
            type: number
        start:
          type: number
          description: ""
        timbre:
          type: array
          description: ""
          items:
            type: number
    ShowObject:
      type: object
      properties:
        available_markets:
          type: array
          description: "A list of the countries in which the show can be played, identified\
            \ by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ code."
          items:
            type: string
        copyrights:
          type: array
          description: The copyright statements of the show.
          items:
            $ref: '#/components/schemas/CopyrightObject'
        description:
          type: string
          description: "A description of the show. HTML tags are stripped away from\
            \ this field, use `html_description` field in case HTML tags are needed."
        episodes:
          type: object
          properties:
            href:
              type: string
              description: A link to the Web API endpoint returning the full result
                of the request
            items:
              type: array
              description: The requested content
              items:
                $ref: '#/components/schemas/SimplifiedEpisodeObject'
            limit:
              type: integer
              description: The maximum number of items in the response (as set in
                the query or by default).
              format: int32
            next:
              type: string
              description: URL to the next page of items. ( `null` if none)
            offset:
              type: integer
              description: The offset of the items returned (as set in the query or
                by default)
              format: int32
            previous:
              type: string
              description: URL to the previous page of items. ( `null` if none)
            total:
              type: integer
              description: The total number of items available to return.
              format: int32
          description: A list of the show's episodes.
        explicit:
          type: boolean
          description: Whether or not the show has explicit content (true = yes it
            does; false = no it does not OR unknown).
        external_urls:
          description: External URLs for this show.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            show.
        html_description:
          type: string
          description: A description of the show. This field may contain HTML tags.
        id:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the show."
        images:
          type: array
          description: "The cover art for the show in various sizes, widest first."
          items:
            $ref: '#/components/schemas/ImageObject'
        is_externally_hosted:
          type: boolean
          description: True if all of the show's episodes are hosted outside of Spotify's
            CDN. This field might be `null` in some cases.
        languages:
          type: array
          description: "A list of the languages used in the show, identified by their\
            \ [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code."
          items:
            type: string
        media_type:
          type: string
          description: The media type of the show.
        name:
          type: string
          description: The name of the episode.
        publisher:
          type: string
          description: The publisher of the show.
        type:
          type: string
          description: The object type.
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the show."
    ShowsObject:
      type: object
      properties:
        shows:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/SimplifiedShowObject'
    SimplifiedAlbumObject:
      type: object
      properties:
        album_group:
          type: string
          description: The field is present when getting an artist's albums. Compare
            to album_type this field represents relationship between the artist and
            the album.
        album_type:
          type: string
          description: The type of the album.
        artists:
          type: array
          description: The artists of the album. Each artist object includes a link
            in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/SimplifiedArtistObject'
        available_markets:
          type: array
          description: "The markets in which the album is available: [ISO 3166-1 alpha-2\
            \ country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). ***NOTE**:\
            \ an album is considered available in a market when at least 1 of its\
            \ tracks is available in that market.*"
          items:
            type: string
        external_urls:
          description: Known external URLs for this album.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            album.
        id:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the album."
        images:
          type: array
          description: "The cover art for the album in various sizes, widest first."
          items:
            $ref: '#/components/schemas/ImageObject'
        name:
          type: string
          description: "The name of the album. In case of an album takedown, the value\
            \ may be an empty string."
        release_date:
          type: string
          description: The date the album was first released.
        release_date_precision:
          type: string
          description: The precision with which `release_date` value is known.
        restrictions:
          description: Included in the response when a content restriction is applied.
          allOf:
          - $ref: '#/components/schemas/AlbumRestrictionObject'
        total_tracks:
          type: integer
          description: The number of tracks in the album.
          format: int32
        type:
          type: string
          description: The object type.
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the album."
    SimplifiedArtistObject:
      type: object
      properties:
        external_urls:
          description: Known external URLs for this artist.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            artist.
        id:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the artist."
        name:
          type: string
          description: The name of the artist.
        type:
          type: string
          description: The object type.
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the artist."
    SimplifiedEpisodeObject:
      type: object
      properties:
        audio_preview_url:
          type: string
          description: A URL to a 30 second preview (MP3 format) of the episode. `null`
            if not available.
        description:
          type: string
          description: "A description of the episode. HTML tags are stripped away\
            \ from this field, use `html_description` field in case HTML tags are\
            \ needed."
        duration_ms:
          type: integer
          description: The episode length in milliseconds.
          format: int32
        explicit:
          type: boolean
          description: Whether or not the episode has explicit content (true = yes
            it does; false = no it does not OR unknown).
        external_urls:
          description: External URLs for this episode.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            episode.
        html_description:
          type: string
          description: A description of the episode. This field may contain HTML tags.
        id:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the episode."
        images:
          type: array
          description: "The cover art for the episode in various sizes, widest first."
          items:
            $ref: '#/components/schemas/ImageObject'
        is_externally_hosted:
          type: boolean
          description: True if the episode is hosted outside of Spotify's CDN.
        is_playable:
          type: boolean
          description: True if the episode is playable in the given market. Otherwise
            false.
        language:
          type: string
          description: "The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639)\
            \ code. This field is deprecated and might be removed in the future. Please\
            \ use the `languages` field instead."
        languages:
          type: array
          description: "A list of the languages used in the episode, identified by\
            \ their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code."
          items:
            type: string
        name:
          type: string
          description: The name of the episode.
        release_date:
          type: string
          description: "The date the episode was first released, for example `\"1981-12-15\"\
            `. Depending on the precision, it might be shown as `\"1981\"` or `\"\
            1981-12\"`."
        release_date_precision:
          type: string
          description: The precision with which `release_date` value is known.
        restrictions:
          description: "Included in the response when a content restriction is applied.\
            \ See [Restriction Object](https://developer.spotify.com/documentation/web-api/reference/#object-episoderestrictionobject)\
            \ for more details."
          allOf:
          - $ref: '#/components/schemas/EpisodeRestrictionObject'
        resume_point:
          description: The user's most recent position in the episode. Set if the
            supplied access token is a user token and has the scope 'user-read-playback-position'.
          allOf:
          - $ref: '#/components/schemas/ResumePointObject'
        type:
          type: string
          description: The object type.
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the episode."
    SimplifiedPlaylistObject:
      type: object
      properties:
        collaborative:
          type: boolean
          description: '`true` if the owner allows other users to modify the playlist.'
        description:
          type: string
          description: "The playlist description. *Only returned for modified, verified\
            \ playlists, otherwise* `null`."
        external_urls:
          description: Known external URLs for this playlist.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            playlist.
        id:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the playlist."
        images:
          type: array
          description: "Images for the playlist. The array may be empty or contain\
            \ up to three images. The images are returned by size in descending order.\
            \ See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/).\
            \ ***Note** : If returned, the source URL for the image (`url`) is temporary\
            \ and will expire in less than a day.*"
          items:
            $ref: '#/components/schemas/ImageObject'
        name:
          type: string
          description: The name of the playlist.
        owner:
          description: The user who owns the playlist
          allOf:
          - $ref: '#/components/schemas/PublicUserObject'
        public:
          type: boolean
          description: "The playlist's public/private status: `true` the playlist\
            \ is public, `false` the playlist is private, `null` the playlist status\
            \ is not relevant. For more about public/private status, see [Working\
            \ with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)"
        snapshot_id:
          type: string
          description: The version identifier for the current playlist. Can be supplied
            in other requests to target a specific playlist version
        tracks:
          description: "A collection containing a link ( `href` ) to the Web API endpoint\
            \ where full details of the playlist's tracks can be retrieved, along\
            \ with the `total` number of tracks in the playlist. Note, a track object\
            \ may be `null`. This can happen if a track is no longer available."
          allOf:
          - $ref: '#/components/schemas/PlaylistTracksRefObject'
        type:
          type: string
          description: "The object type: \"playlist\""
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the playlist."
    SimplifiedShowObject:
      type: object
      properties:
        available_markets:
          type: array
          description: "A list of the countries in which the show can be played, identified\
            \ by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ code."
          items:
            type: string
        copyrights:
          type: array
          description: The copyright statements of the show.
          items:
            $ref: '#/components/schemas/CopyrightObject'
        description:
          type: string
          description: "A description of the show. HTML tags are stripped away from\
            \ this field, use `html_description` field in case HTML tags are needed."
        explicit:
          type: boolean
          description: Whether or not the show has explicit content (true = yes it
            does; false = no it does not OR unknown).
        external_urls:
          description: External URLs for this show.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            show.
        html_description:
          type: string
          description: A description of the show. This field may contain HTML tags.
        id:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the show."
        images:
          type: array
          description: "The cover art for the show in various sizes, widest first."
          items:
            $ref: '#/components/schemas/ImageObject'
        is_externally_hosted:
          type: boolean
          description: True if all of the show's episodes are hosted outside of Spotify's
            CDN. This field might be `null` in some cases.
        languages:
          type: array
          description: "A list of the languages used in the show, identified by their\
            \ [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code."
          items:
            type: string
        media_type:
          type: string
          description: The media type of the show.
        name:
          type: string
          description: The name of the episode.
        publisher:
          type: string
          description: The publisher of the show.
        type:
          type: string
          description: The object type.
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the show."
    SimplifiedTrackObject:
      type: object
      properties:
        artists:
          type: array
          description: The artists who performed the track. Each artist object includes
            a link in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/SimplifiedArtistObject'
        available_markets:
          type: array
          description: "A list of the countries in which the track can be played,\
            \ identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ code."
          items:
            type: string
        disc_number:
          type: integer
          description: The disc number (usually `1` unless the album consists of more
            than one disc).
          format: int32
        duration_ms:
          type: integer
          description: The track length in milliseconds.
          format: int32
        explicit:
          type: boolean
          description: Whether or not the track has explicit lyrics ( `true` = yes
            it does; `false` = no it does not OR unknown).
        external_urls:
          description: External URLs for this track.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            track.
        id:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the track."
        is_local:
          type: boolean
          description: Whether or not the track is from a local file.
        is_playable:
          type: boolean
          description: "Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)\
            \ is applied. If `true`, the track is playable in the given market. Otherwise\
            \ `false`."
        linked_from:
          description: "Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)\
            \ is applied and is only part of the response if the track linking, in\
            \ fact, exists. The requested track has been replaced with a different\
            \ track. The track in the `linked_from` object contains information about\
            \ the originally requested track."
          allOf:
          - $ref: '#/components/schemas/LinkedTrackObject'
        name:
          type: string
          description: The name of the track.
        preview_url:
          type: string
          description: A URL to a 30 second preview (MP3 format) of the track.
        restrictions:
          description: "Included in the response when a content restriction is applied.\
            \ See [Restriction Object](https://developer.spotify.com/documentation/web-api/reference/#object-trackrestrictionobject)\
            \ for more details."
          allOf:
          - $ref: '#/components/schemas/TrackRestrictionObject'
        track_number:
          type: integer
          description: "The number of the track. If an album has several discs, the\
            \ track number is the number on the specified disc."
          format: int32
        type:
          type: string
          description: "The object type: \"track\"."
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the track."
    SnapshotIdObject:
      type: object
      properties:
        snapshot_id:
          type: string
          description: The snapshot_id can be used to identify your playlist version
            in future requests.
    TimeIntervalObject:
      type: object
      properties:
        confidence:
          type: number
          description: "The confidence, from 0.0 to 1.0, of the reliability of the\
            \ interval."
        duration:
          type: number
          description: The duration (in seconds) of the time interval.
        start:
          type: number
          description: The starting point (in seconds) of the time interval.
    TrackObject:
      type: object
      properties:
        album:
          description: The album on which the track appears. The album object includes
            a link in `href` to full information about the album.
          allOf:
          - $ref: '#/components/schemas/SimplifiedAlbumObject'
        artists:
          type: array
          description: The artists who performed the track. Each artist object includes
            a link in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/ArtistObject'
        available_markets:
          type: array
          description: "A list of the countries in which the track can be played,\
            \ identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ code."
          items:
            type: string
        disc_number:
          type: integer
          description: The disc number (usually `1` unless the album consists of more
            than one disc).
          format: int32
        duration_ms:
          type: integer
          description: The track length in milliseconds.
          format: int32
        explicit:
          type: boolean
          description: Whether or not the track has explicit lyrics ( `true` = yes
            it does; `false` = no it does not OR unknown).
        external_ids:
          description: Known external IDs for the track.
          allOf:
          - $ref: '#/components/schemas/ExternalIdObject'
        external_urls:
          description: Known external URLs for this track.
          allOf:
          - $ref: '#/components/schemas/ExternalUrlObject'
        href:
          type: string
          description: A link to the Web API endpoint providing full details of the
            track.
        id:
          type: string
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the track."
        is_local:
          type: boolean
          description: Whether or not the track is from a local file.
        is_playable:
          type: boolean
          description: "Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)\
            \ is applied. If `true`, the track is playable in the given market. Otherwise\
            \ `false`."
        linked_from:
          description: "Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)\
            \ is applied, and the requested track has been replaced with different\
            \ track. The track in the `linked_from` object contains information about\
            \ the originally requested track."
          allOf:
          - $ref: '#/components/schemas/LinkedTrackObject'
        name:
          type: string
          description: The name of the track.
        popularity:
          type: integer
          description: "The popularity of the track. The value will be between 0 and\
            \ 100, with 100 being the most popular.  \nThe popularity of a track is\
            \ a value between 0 and 100, with 100 being the most popular. The popularity\
            \ is calculated by algorithm and is based, in the most part, on the total\
            \ number of plays the track has had and how recent those plays are.  \n\
            Generally speaking, songs that are being played a lot now will have a\
            \ higher popularity than songs that were played a lot in the past. Duplicate\
            \ tracks (e.g. the same track from a single and an album) are rated independently.\
            \ Artist and album popularity is derived mathematically from track popularity.\
            \ ***Note**: the popularity value may lag actual popularity by a few days:\
            \ the value is not updated in real time.*"
          format: int32
        preview_url:
          type: string
          description: A link to a 30 second preview (MP3 format) of the track. Can
            be `null`
        restrictions:
          description: "Included in the response when a content restriction is applied.\
            \ See [Restriction Object](https://developer.spotify.com/documentation/web-api/reference/#object-trackrestrictionobject)\
            \ for more details."
          allOf:
          - $ref: '#/components/schemas/TrackRestrictionObject'
        track_number:
          type: integer
          description: "The number of the track. If an album has several discs, the\
            \ track number is the number on the specified disc."
          format: int32
        type:
          type: string
          description: "The object type: \"track\"."
        uri:
          type: string
          description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the track."
    TrackRestrictionObject:
      type: object
      properties:
        reason:
          type: string
          description: "The reason for the restriction. Supported values:  \n\n- `market`\
            \ - The content item is not available in the given market.  \n- `product`\
            \ - The content item is not available for the user's subscription type.\
            \  \n- `explicit` - The content item is explicit and the user's account\
            \ is set to not play explicit content.  \n  Additional reasons may be\
            \ added in the future. **Note**: If you use this field, make sure that\
            \ your application safely handles unknown values."
    TracksObject:
      type: object
      properties:
        tracks:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/TrackObject'
    TuneableTrackObject:
      type: object
      properties:
        acousticness:
          type: number
          description: A confidence measure from 0.0 to 1.0 of whether the track is
            acoustic. 1.0 represents high confidence the track is acoustic.
        danceability:
          type: number
          description: "Danceability describes how suitable a track is for dancing\
            \ based on a combination of musical elements including tempo, rhythm stability,\
            \ beat strength, and overall regularity. A value of 0.0 is least danceable\
            \ and 1.0 is most danceable."
        duration_ms:
          type: integer
          description: The duration of the track in milliseconds.
          format: int32
        energy:
          type: number
          description: "Energy is a measure from 0.0 to 1.0 and represents a perceptual\
            \ measure of intensity and activity. Typically, energetic tracks feel\
            \ fast, loud, and noisy. For example, death metal has high energy, while\
            \ a Bach prelude scores low on the scale. Perceptual features contributing\
            \ to this attribute include dynamic range, perceived loudness, timbre,\
            \ onset rate, and general entropy."
        instrumentalness:
          type: number
          description: "Predicts whether a track contains no vocals. \"Ooh\" and \"\
            aah\" sounds are treated as instrumental in this context. Rap or spoken\
            \ word tracks are clearly \"vocal\". The closer the instrumentalness value\
            \ is to 1.0, the greater likelihood the track contains no vocal content.\
            \ Values above 0.5 are intended to represent instrumental tracks, but\
            \ confidence is higher as the value approaches 1.0."
        key:
          type: integer
          description: "The key the track is in. Integers map to pitches using standard\
            \ [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g.\
            \ 0 = C, 1 = C♯/D♭, 2 = D, and so on."
          format: int32
        liveness:
          type: number
          description: Detects the presence of an audience in the recording. Higher
            liveness values represent an increased probability that the track was
            performed live. A value above 0.8 provides strong likelihood that the
            track is live.
        loudness:
          type: number
          description: The overall loudness of a track in decibels (dB). Loudness
            values are averaged across the entire track and are useful for comparing
            relative loudness of tracks. Loudness is the quality of a sound that is
            the primary psychological correlate of physical strength (amplitude).
            Values typical range between -60 and 0 db.
        mode:
          type: integer
          description: "Mode indicates the modality (major or minor) of a track, the\
            \ type of scale from which its melodic content is derived. Major is represented\
            \ by 1 and minor is 0."
          format: int32
        popularity:
          type: number
          description: "The popularity of the track. The value will be between 0 and\
            \ 100, with 100 being the most popular. The popularity is calculated by\
            \ algorithm and is based, in the most part, on the total number of plays\
            \ the track has had and how recent those plays are. ***Note** : When applying\
            \ track relinking via the `market` parameter, it is expected to find relinked\
            \ tracks with popularities that do not match `min_*`, `max_*`and `target_*`\
            \ popularities. These relinked tracks are accurate replacements for unplayable\
            \ tracks with the expected popularity scores. Original, non-relinked tracks\
            \ are available via the `linked_from` attribute of the [relinked track\
            \ response](https://developer.spotify.com/documentation/general/guides/track-relinking-guide).*"
        speechiness:
          type: number
          description: "Speechiness detects the presence of spoken words in a track.\
            \ The more exclusively speech-like the recording (e.g. talk show, audio\
            \ book, poetry), the closer to 1.0 the attribute value. Values above 0.66\
            \ describe tracks that are probably made entirely of spoken words. Values\
            \ between 0.33 and 0.66 describe tracks that may contain both music and\
            \ speech, either in sections or layered, including such cases as rap music.\
            \ Values below 0.33 most likely represent music and other non-speech-like\
            \ tracks."
        tempo:
          type: number
          description: "The overall estimated tempo of a track in beats per minute\
            \ (BPM). In musical terminology, tempo is the speed or pace of a given\
            \ piece and derives directly from the average beat duration."
        time_signature:
          type: integer
          description: An estimated overall time signature of a track. The time signature
            (meter) is a notational convention to specify how many beats are in each
            bar (or measure).
          format: int32
        valence:
          type: number
          description: "A measure from 0.0 to 1.0 describing the musical positiveness\
            \ conveyed by a track. Tracks with high valence sound more positive (e.g.\
            \ happy, cheerful, euphoric), while tracks with low valence sound more\
            \ negative (e.g. sad, depressed, angry)."
  responses:
    ErrorResponse:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseObject'
  securitySchemes:
    oauth_2_0:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.spotify.com/authorize
          tokenUrl: https://accounts.spotify.com/api/token
          scopes:
            playlist-read-private: Read access to user's private playlists.
            playlist-read-collaborative: Include collaborative playlists when requesting
              a user's playlists.
            ugc-image-upload: Write access to user-provided images.
            user-follow-read: Read access to the list of artists and other users that
              the user follows.
            playlist-modify-private: Write access to a user's private playlists.
            user-read-email: Read access to user’s email address.
            user-read-private: Read access to user’s subscription details (type of
              user account).
            app-remote-control: Remote control playback of Spotify. This scope is
              currently available to Spotify iOS and Android SDKs.
            streaming: Control playback of a Spotify track. This scope is currently
              available to the Web Playback SDK. The user must have a Spotify Premium
              account.
            user-follow-modify: Write/delete access to the list of artists and other
              users that the user follows.
            user-modify-playback-state: Write access to a user’s playback state
            user-library-read: Read access to a user's library.
            user-library-modify: Write/delete access to a user's "Your Music" library.
            playlist-modify-public: Write access to a user's public playlists.
            user-read-playback-state: Read access to a user’s player state.
            user-read-currently-playing: Read access to a user’s currently playing
              content.
            user-read-recently-played: Read access to a user’s recently played tracks.
            user-read-playback-position: Read access to a user’s playback position
              in a content.
            user-top-read: Read access to a user's top artists and tracks.
